
NUCLEO-H755ZI-Q_001_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001228  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  081014c0  081014c0  000114c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081014d0  081014d0  000114d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081014d4  081014d4  000114d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  081014d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  10000010  081014e8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00006000  100000c8  081014e8  000200c8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bca5  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ace  00000000  00000000  0002bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c78  00000000  00000000  0002d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000993  00000000  00000000  0002e470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6b6  00000000  00000000  0002ee03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ef9c  00000000  00000000  000694b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187ed1  00000000  00000000  00078455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003390  00000000  00000000  00200328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000056  00000000  00000000  002036b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081014a8 	.word	0x081014a8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	081014a8 	.word	0x081014a8

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b22      	ldr	r3, [pc, #136]	; (8100398 <main+0x90>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a20      	ldr	r2, [pc, #128]	; (8100398 <main+0x90>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1e      	ldr	r3, [pc, #120]	; (8100398 <main+0x90>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fb6f 	bl	8100a10 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 fbf9 	bl	8100b28 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 fb7a 	bl	8100a34 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b16      	ldr	r3, [pc, #88]	; (810039c <main+0x94>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b14      	ldr	r3, [pc, #80]	; (81003a0 <main+0x98>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a12      	ldr	r2, [pc, #72]	; (81003a0 <main+0x98>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0f      	ldr	r3, [pc, #60]	; (81003a0 <main+0x98>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0e      	ldr	r2, [pc, #56]	; (81003a0 <main+0x98>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 f964 	bl	810063c <HAL_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_IWDG2_Init();
  MX_TIM2_Init();
 8100374:	f000 f864 	bl	8100440 <MX_TIM2_Init>
  MX_TIM4_Init();
 8100378:	f000 f8b0 	bl	81004dc <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 810037c:	2102      	movs	r1, #2
 810037e:	4809      	ldr	r0, [pc, #36]	; (81003a4 <main+0x9c>)
 8100380:	f000 fb2c 	bl	81009dc <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8100384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100388:	4807      	ldr	r0, [pc, #28]	; (81003a8 <main+0xa0>)
 810038a:	f000 fb27 	bl	81009dc <HAL_GPIO_TogglePin>
    HAL_Delay(2111);
 810038e:	f640 003f 	movw	r0, #2111	; 0x83f
 8100392:	f000 fa07 	bl	81007a4 <HAL_Delay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100396:	e7f1      	b.n	810037c <main+0x74>
 8100398:	58024400 	.word	0x58024400
 810039c:	e000ed00 	.word	0xe000ed00
 81003a0:	58026400 	.word	0x58026400
 81003a4:	58021000 	.word	0x58021000
 81003a8:	58020400 	.word	0x58020400

081003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81003ac:	b480      	push	{r7}
 81003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81003b0:	b672      	cpsid	i
}
 81003b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81003b4:	e7fe      	b.n	81003b4 <Error_Handler+0x8>
	...

081003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81003b8:	b480      	push	{r7}
 81003ba:	b083      	sub	sp, #12
 81003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81003be:	4b0a      	ldr	r3, [pc, #40]	; (81003e8 <HAL_MspInit+0x30>)
 81003c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81003c4:	4a08      	ldr	r2, [pc, #32]	; (81003e8 <HAL_MspInit+0x30>)
 81003c6:	f043 0302 	orr.w	r3, r3, #2
 81003ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81003ce:	4b06      	ldr	r3, [pc, #24]	; (81003e8 <HAL_MspInit+0x30>)
 81003d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81003d4:	f003 0302 	and.w	r3, r3, #2
 81003d8:	607b      	str	r3, [r7, #4]
 81003da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81003dc:	bf00      	nop
 81003de:	370c      	adds	r7, #12
 81003e0:	46bd      	mov	sp, r7
 81003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003e6:	4770      	bx	lr
 81003e8:	58024400 	.word	0x58024400

081003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81003ec:	b480      	push	{r7}
 81003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81003f0:	e7fe      	b.n	81003f0 <NMI_Handler+0x4>

081003f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81003f2:	b480      	push	{r7}
 81003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81003f6:	e7fe      	b.n	81003f6 <HardFault_Handler+0x4>

081003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81003f8:	b480      	push	{r7}
 81003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81003fc:	e7fe      	b.n	81003fc <MemManage_Handler+0x4>

081003fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81003fe:	b480      	push	{r7}
 8100400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100402:	e7fe      	b.n	8100402 <BusFault_Handler+0x4>

08100404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100404:	b480      	push	{r7}
 8100406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100408:	e7fe      	b.n	8100408 <UsageFault_Handler+0x4>

0810040a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810040a:	b480      	push	{r7}
 810040c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810040e:	bf00      	nop
 8100410:	46bd      	mov	sp, r7
 8100412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100416:	4770      	bx	lr

08100418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100418:	b480      	push	{r7}
 810041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810041c:	bf00      	nop
 810041e:	46bd      	mov	sp, r7
 8100420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100424:	4770      	bx	lr

08100426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100426:	b480      	push	{r7}
 8100428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810042a:	bf00      	nop
 810042c:	46bd      	mov	sp, r7
 810042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100432:	4770      	bx	lr

08100434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100434:	b580      	push	{r7, lr}
 8100436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100438:	f000 f994 	bl	8100764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810043c:	bf00      	nop
 810043e:	bd80      	pop	{r7, pc}

08100440 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8100440:	b580      	push	{r7, lr}
 8100442:	b088      	sub	sp, #32
 8100444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100446:	f107 0310 	add.w	r3, r7, #16
 810044a:	2200      	movs	r2, #0
 810044c:	601a      	str	r2, [r3, #0]
 810044e:	605a      	str	r2, [r3, #4]
 8100450:	609a      	str	r2, [r3, #8]
 8100452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100454:	1d3b      	adds	r3, r7, #4
 8100456:	2200      	movs	r2, #0
 8100458:	601a      	str	r2, [r3, #0]
 810045a:	605a      	str	r2, [r3, #4]
 810045c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810045e:	4b1e      	ldr	r3, [pc, #120]	; (81004d8 <MX_TIM2_Init+0x98>)
 8100460:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100464:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8100466:	4b1c      	ldr	r3, [pc, #112]	; (81004d8 <MX_TIM2_Init+0x98>)
 8100468:	2200      	movs	r2, #0
 810046a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810046c:	4b1a      	ldr	r3, [pc, #104]	; (81004d8 <MX_TIM2_Init+0x98>)
 810046e:	2200      	movs	r2, #0
 8100470:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8100472:	4b19      	ldr	r3, [pc, #100]	; (81004d8 <MX_TIM2_Init+0x98>)
 8100474:	f04f 32ff 	mov.w	r2, #4294967295
 8100478:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810047a:	4b17      	ldr	r3, [pc, #92]	; (81004d8 <MX_TIM2_Init+0x98>)
 810047c:	2200      	movs	r2, #0
 810047e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100480:	4b15      	ldr	r3, [pc, #84]	; (81004d8 <MX_TIM2_Init+0x98>)
 8100482:	2200      	movs	r2, #0
 8100484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8100486:	4814      	ldr	r0, [pc, #80]	; (81004d8 <MX_TIM2_Init+0x98>)
 8100488:	f000 fcd6 	bl	8100e38 <HAL_TIM_Base_Init>
 810048c:	4603      	mov	r3, r0
 810048e:	2b00      	cmp	r3, #0
 8100490:	d001      	beq.n	8100496 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8100492:	f7ff ff8b 	bl	81003ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810049a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 810049c:	f107 0310 	add.w	r3, r7, #16
 81004a0:	4619      	mov	r1, r3
 81004a2:	480d      	ldr	r0, [pc, #52]	; (81004d8 <MX_TIM2_Init+0x98>)
 81004a4:	f000 fd20 	bl	8100ee8 <HAL_TIM_ConfigClockSource>
 81004a8:	4603      	mov	r3, r0
 81004aa:	2b00      	cmp	r3, #0
 81004ac:	d001      	beq.n	81004b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 81004ae:	f7ff ff7d 	bl	81003ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81004b2:	2300      	movs	r3, #0
 81004b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81004b6:	2300      	movs	r3, #0
 81004b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81004ba:	1d3b      	adds	r3, r7, #4
 81004bc:	4619      	mov	r1, r3
 81004be:	4806      	ldr	r0, [pc, #24]	; (81004d8 <MX_TIM2_Init+0x98>)
 81004c0:	f000 ff40 	bl	8101344 <HAL_TIMEx_MasterConfigSynchronization>
 81004c4:	4603      	mov	r3, r0
 81004c6:	2b00      	cmp	r3, #0
 81004c8:	d001      	beq.n	81004ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 81004ca:	f7ff ff6f 	bl	81003ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81004ce:	bf00      	nop
 81004d0:	3720      	adds	r7, #32
 81004d2:	46bd      	mov	sp, r7
 81004d4:	bd80      	pop	{r7, pc}
 81004d6:	bf00      	nop
 81004d8:	1000002c 	.word	0x1000002c

081004dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 81004dc:	b580      	push	{r7, lr}
 81004de:	b088      	sub	sp, #32
 81004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81004e2:	f107 0310 	add.w	r3, r7, #16
 81004e6:	2200      	movs	r2, #0
 81004e8:	601a      	str	r2, [r3, #0]
 81004ea:	605a      	str	r2, [r3, #4]
 81004ec:	609a      	str	r2, [r3, #8]
 81004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81004f0:	1d3b      	adds	r3, r7, #4
 81004f2:	2200      	movs	r2, #0
 81004f4:	601a      	str	r2, [r3, #0]
 81004f6:	605a      	str	r2, [r3, #4]
 81004f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81004fa:	4b1d      	ldr	r3, [pc, #116]	; (8100570 <MX_TIM4_Init+0x94>)
 81004fc:	4a1d      	ldr	r2, [pc, #116]	; (8100574 <MX_TIM4_Init+0x98>)
 81004fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8100500:	4b1b      	ldr	r3, [pc, #108]	; (8100570 <MX_TIM4_Init+0x94>)
 8100502:	2200      	movs	r2, #0
 8100504:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100506:	4b1a      	ldr	r3, [pc, #104]	; (8100570 <MX_TIM4_Init+0x94>)
 8100508:	2200      	movs	r2, #0
 810050a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 810050c:	4b18      	ldr	r3, [pc, #96]	; (8100570 <MX_TIM4_Init+0x94>)
 810050e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100512:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100514:	4b16      	ldr	r3, [pc, #88]	; (8100570 <MX_TIM4_Init+0x94>)
 8100516:	2200      	movs	r2, #0
 8100518:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810051a:	4b15      	ldr	r3, [pc, #84]	; (8100570 <MX_TIM4_Init+0x94>)
 810051c:	2200      	movs	r2, #0
 810051e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8100520:	4813      	ldr	r0, [pc, #76]	; (8100570 <MX_TIM4_Init+0x94>)
 8100522:	f000 fc89 	bl	8100e38 <HAL_TIM_Base_Init>
 8100526:	4603      	mov	r3, r0
 8100528:	2b00      	cmp	r3, #0
 810052a:	d001      	beq.n	8100530 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 810052c:	f7ff ff3e 	bl	81003ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100534:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8100536:	f107 0310 	add.w	r3, r7, #16
 810053a:	4619      	mov	r1, r3
 810053c:	480c      	ldr	r0, [pc, #48]	; (8100570 <MX_TIM4_Init+0x94>)
 810053e:	f000 fcd3 	bl	8100ee8 <HAL_TIM_ConfigClockSource>
 8100542:	4603      	mov	r3, r0
 8100544:	2b00      	cmp	r3, #0
 8100546:	d001      	beq.n	810054c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8100548:	f7ff ff30 	bl	81003ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810054c:	2300      	movs	r3, #0
 810054e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100550:	2300      	movs	r3, #0
 8100552:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8100554:	1d3b      	adds	r3, r7, #4
 8100556:	4619      	mov	r1, r3
 8100558:	4805      	ldr	r0, [pc, #20]	; (8100570 <MX_TIM4_Init+0x94>)
 810055a:	f000 fef3 	bl	8101344 <HAL_TIMEx_MasterConfigSynchronization>
 810055e:	4603      	mov	r3, r0
 8100560:	2b00      	cmp	r3, #0
 8100562:	d001      	beq.n	8100568 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8100564:	f7ff ff22 	bl	81003ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8100568:	bf00      	nop
 810056a:	3720      	adds	r7, #32
 810056c:	46bd      	mov	sp, r7
 810056e:	bd80      	pop	{r7, pc}
 8100570:	10000078 	.word	0x10000078
 8100574:	40000800 	.word	0x40000800

08100578 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8100578:	b480      	push	{r7}
 810057a:	b085      	sub	sp, #20
 810057c:	af00      	add	r7, sp, #0
 810057e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8100580:	687b      	ldr	r3, [r7, #4]
 8100582:	681b      	ldr	r3, [r3, #0]
 8100584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100588:	d10f      	bne.n	81005aa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 810058a:	4b15      	ldr	r3, [pc, #84]	; (81005e0 <HAL_TIM_Base_MspInit+0x68>)
 810058c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100590:	4a13      	ldr	r2, [pc, #76]	; (81005e0 <HAL_TIM_Base_MspInit+0x68>)
 8100592:	f043 0301 	orr.w	r3, r3, #1
 8100596:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810059a:	4b11      	ldr	r3, [pc, #68]	; (81005e0 <HAL_TIM_Base_MspInit+0x68>)
 810059c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81005a0:	f003 0301 	and.w	r3, r3, #1
 81005a4:	60fb      	str	r3, [r7, #12]
 81005a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 81005a8:	e013      	b.n	81005d2 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM4)
 81005aa:	687b      	ldr	r3, [r7, #4]
 81005ac:	681b      	ldr	r3, [r3, #0]
 81005ae:	4a0d      	ldr	r2, [pc, #52]	; (81005e4 <HAL_TIM_Base_MspInit+0x6c>)
 81005b0:	4293      	cmp	r3, r2
 81005b2:	d10e      	bne.n	81005d2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 81005b4:	4b0a      	ldr	r3, [pc, #40]	; (81005e0 <HAL_TIM_Base_MspInit+0x68>)
 81005b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81005ba:	4a09      	ldr	r2, [pc, #36]	; (81005e0 <HAL_TIM_Base_MspInit+0x68>)
 81005bc:	f043 0304 	orr.w	r3, r3, #4
 81005c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81005c4:	4b06      	ldr	r3, [pc, #24]	; (81005e0 <HAL_TIM_Base_MspInit+0x68>)
 81005c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81005ca:	f003 0304 	and.w	r3, r3, #4
 81005ce:	60bb      	str	r3, [r7, #8]
 81005d0:	68bb      	ldr	r3, [r7, #8]
}
 81005d2:	bf00      	nop
 81005d4:	3714      	adds	r7, #20
 81005d6:	46bd      	mov	sp, r7
 81005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005dc:	4770      	bx	lr
 81005de:	bf00      	nop
 81005e0:	58024400 	.word	0x58024400
 81005e4:	40000800 	.word	0x40000800

081005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100620 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81005ec:	f7ff fe74 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005f0:	480c      	ldr	r0, [pc, #48]	; (8100624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005f2:	490d      	ldr	r1, [pc, #52]	; (8100628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81005f4:	4a0d      	ldr	r2, [pc, #52]	; (810062c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81005f8:	e002      	b.n	8100600 <LoopCopyDataInit>

081005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81005fe:	3304      	adds	r3, #4

08100600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100604:	d3f9      	bcc.n	81005fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100606:	4a0a      	ldr	r2, [pc, #40]	; (8100630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100608:	4c0a      	ldr	r4, [pc, #40]	; (8100634 <LoopFillZerobss+0x22>)
  movs r3, #0
 810060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810060c:	e001      	b.n	8100612 <LoopFillZerobss>

0810060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100610:	3204      	adds	r2, #4

08100612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100614:	d3fb      	bcc.n	810060e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100616:	f000 ff23 	bl	8101460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810061a:	f7ff fe75 	bl	8100308 <main>
  bx  lr
 810061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100620:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100624:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100628:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 810062c:	081014d8 	.word	0x081014d8
  ldr r2, =_sbss
 8100630:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100634:	100000c8 	.word	0x100000c8

08100638 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100638:	e7fe      	b.n	8100638 <ADC3_IRQHandler>
	...

0810063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810063c:	b580      	push	{r7, lr}
 810063e:	b082      	sub	sp, #8
 8100640:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100642:	4b28      	ldr	r3, [pc, #160]	; (81006e4 <HAL_Init+0xa8>)
 8100644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100648:	4a26      	ldr	r2, [pc, #152]	; (81006e4 <HAL_Init+0xa8>)
 810064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810064e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100652:	4b24      	ldr	r3, [pc, #144]	; (81006e4 <HAL_Init+0xa8>)
 8100654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810065c:	603b      	str	r3, [r7, #0]
 810065e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100660:	4b21      	ldr	r3, [pc, #132]	; (81006e8 <HAL_Init+0xac>)
 8100662:	681b      	ldr	r3, [r3, #0]
 8100664:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100668:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810066c:	4a1e      	ldr	r2, [pc, #120]	; (81006e8 <HAL_Init+0xac>)
 810066e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100672:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100674:	4b1c      	ldr	r3, [pc, #112]	; (81006e8 <HAL_Init+0xac>)
 8100676:	681b      	ldr	r3, [r3, #0]
 8100678:	4a1b      	ldr	r2, [pc, #108]	; (81006e8 <HAL_Init+0xac>)
 810067a:	f043 0301 	orr.w	r3, r3, #1
 810067e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100680:	2003      	movs	r0, #3
 8100682:	f000 f965 	bl	8100950 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100686:	f000 fa5d 	bl	8100b44 <HAL_RCC_GetSysClockFreq>
 810068a:	4602      	mov	r2, r0
 810068c:	4b15      	ldr	r3, [pc, #84]	; (81006e4 <HAL_Init+0xa8>)
 810068e:	699b      	ldr	r3, [r3, #24]
 8100690:	0a1b      	lsrs	r3, r3, #8
 8100692:	f003 030f 	and.w	r3, r3, #15
 8100696:	4915      	ldr	r1, [pc, #84]	; (81006ec <HAL_Init+0xb0>)
 8100698:	5ccb      	ldrb	r3, [r1, r3]
 810069a:	f003 031f 	and.w	r3, r3, #31
 810069e:	fa22 f303 	lsr.w	r3, r2, r3
 81006a2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81006a4:	4b0f      	ldr	r3, [pc, #60]	; (81006e4 <HAL_Init+0xa8>)
 81006a6:	699b      	ldr	r3, [r3, #24]
 81006a8:	f003 030f 	and.w	r3, r3, #15
 81006ac:	4a0f      	ldr	r2, [pc, #60]	; (81006ec <HAL_Init+0xb0>)
 81006ae:	5cd3      	ldrb	r3, [r2, r3]
 81006b0:	f003 031f 	and.w	r3, r3, #31
 81006b4:	687a      	ldr	r2, [r7, #4]
 81006b6:	fa22 f303 	lsr.w	r3, r2, r3
 81006ba:	4a0d      	ldr	r2, [pc, #52]	; (81006f0 <HAL_Init+0xb4>)
 81006bc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81006be:	4b0c      	ldr	r3, [pc, #48]	; (81006f0 <HAL_Init+0xb4>)
 81006c0:	681b      	ldr	r3, [r3, #0]
 81006c2:	4a0c      	ldr	r2, [pc, #48]	; (81006f4 <HAL_Init+0xb8>)
 81006c4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81006c6:	2000      	movs	r0, #0
 81006c8:	f000 f816 	bl	81006f8 <HAL_InitTick>
 81006cc:	4603      	mov	r3, r0
 81006ce:	2b00      	cmp	r3, #0
 81006d0:	d001      	beq.n	81006d6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81006d2:	2301      	movs	r3, #1
 81006d4:	e002      	b.n	81006dc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81006d6:	f7ff fe6f 	bl	81003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81006da:	2300      	movs	r3, #0
}
 81006dc:	4618      	mov	r0, r3
 81006de:	3708      	adds	r7, #8
 81006e0:	46bd      	mov	sp, r7
 81006e2:	bd80      	pop	{r7, pc}
 81006e4:	58024400 	.word	0x58024400
 81006e8:	40024400 	.word	0x40024400
 81006ec:	081014c0 	.word	0x081014c0
 81006f0:	10000004 	.word	0x10000004
 81006f4:	10000000 	.word	0x10000000

081006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81006f8:	b580      	push	{r7, lr}
 81006fa:	b082      	sub	sp, #8
 81006fc:	af00      	add	r7, sp, #0
 81006fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100700:	4b15      	ldr	r3, [pc, #84]	; (8100758 <HAL_InitTick+0x60>)
 8100702:	781b      	ldrb	r3, [r3, #0]
 8100704:	2b00      	cmp	r3, #0
 8100706:	d101      	bne.n	810070c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100708:	2301      	movs	r3, #1
 810070a:	e021      	b.n	8100750 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810070c:	4b13      	ldr	r3, [pc, #76]	; (810075c <HAL_InitTick+0x64>)
 810070e:	681a      	ldr	r2, [r3, #0]
 8100710:	4b11      	ldr	r3, [pc, #68]	; (8100758 <HAL_InitTick+0x60>)
 8100712:	781b      	ldrb	r3, [r3, #0]
 8100714:	4619      	mov	r1, r3
 8100716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810071a:	fbb3 f3f1 	udiv	r3, r3, r1
 810071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8100722:	4618      	mov	r0, r3
 8100724:	f000 f939 	bl	810099a <HAL_SYSTICK_Config>
 8100728:	4603      	mov	r3, r0
 810072a:	2b00      	cmp	r3, #0
 810072c:	d001      	beq.n	8100732 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810072e:	2301      	movs	r3, #1
 8100730:	e00e      	b.n	8100750 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100732:	687b      	ldr	r3, [r7, #4]
 8100734:	2b0f      	cmp	r3, #15
 8100736:	d80a      	bhi.n	810074e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100738:	2200      	movs	r2, #0
 810073a:	6879      	ldr	r1, [r7, #4]
 810073c:	f04f 30ff 	mov.w	r0, #4294967295
 8100740:	f000 f911 	bl	8100966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100744:	4a06      	ldr	r2, [pc, #24]	; (8100760 <HAL_InitTick+0x68>)
 8100746:	687b      	ldr	r3, [r7, #4]
 8100748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810074a:	2300      	movs	r3, #0
 810074c:	e000      	b.n	8100750 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810074e:	2301      	movs	r3, #1
}
 8100750:	4618      	mov	r0, r3
 8100752:	3708      	adds	r7, #8
 8100754:	46bd      	mov	sp, r7
 8100756:	bd80      	pop	{r7, pc}
 8100758:	1000000c 	.word	0x1000000c
 810075c:	10000000 	.word	0x10000000
 8100760:	10000008 	.word	0x10000008

08100764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100764:	b480      	push	{r7}
 8100766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100768:	4b06      	ldr	r3, [pc, #24]	; (8100784 <HAL_IncTick+0x20>)
 810076a:	781b      	ldrb	r3, [r3, #0]
 810076c:	461a      	mov	r2, r3
 810076e:	4b06      	ldr	r3, [pc, #24]	; (8100788 <HAL_IncTick+0x24>)
 8100770:	681b      	ldr	r3, [r3, #0]
 8100772:	4413      	add	r3, r2
 8100774:	4a04      	ldr	r2, [pc, #16]	; (8100788 <HAL_IncTick+0x24>)
 8100776:	6013      	str	r3, [r2, #0]
}
 8100778:	bf00      	nop
 810077a:	46bd      	mov	sp, r7
 810077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100780:	4770      	bx	lr
 8100782:	bf00      	nop
 8100784:	1000000c 	.word	0x1000000c
 8100788:	100000c4 	.word	0x100000c4

0810078c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810078c:	b480      	push	{r7}
 810078e:	af00      	add	r7, sp, #0
  return uwTick;
 8100790:	4b03      	ldr	r3, [pc, #12]	; (81007a0 <HAL_GetTick+0x14>)
 8100792:	681b      	ldr	r3, [r3, #0]
}
 8100794:	4618      	mov	r0, r3
 8100796:	46bd      	mov	sp, r7
 8100798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810079c:	4770      	bx	lr
 810079e:	bf00      	nop
 81007a0:	100000c4 	.word	0x100000c4

081007a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81007a4:	b580      	push	{r7, lr}
 81007a6:	b084      	sub	sp, #16
 81007a8:	af00      	add	r7, sp, #0
 81007aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81007ac:	f7ff ffee 	bl	810078c <HAL_GetTick>
 81007b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81007b2:	687b      	ldr	r3, [r7, #4]
 81007b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81007b6:	68fb      	ldr	r3, [r7, #12]
 81007b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81007bc:	d005      	beq.n	81007ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81007be:	4b0a      	ldr	r3, [pc, #40]	; (81007e8 <HAL_Delay+0x44>)
 81007c0:	781b      	ldrb	r3, [r3, #0]
 81007c2:	461a      	mov	r2, r3
 81007c4:	68fb      	ldr	r3, [r7, #12]
 81007c6:	4413      	add	r3, r2
 81007c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81007ca:	bf00      	nop
 81007cc:	f7ff ffde 	bl	810078c <HAL_GetTick>
 81007d0:	4602      	mov	r2, r0
 81007d2:	68bb      	ldr	r3, [r7, #8]
 81007d4:	1ad3      	subs	r3, r2, r3
 81007d6:	68fa      	ldr	r2, [r7, #12]
 81007d8:	429a      	cmp	r2, r3
 81007da:	d8f7      	bhi.n	81007cc <HAL_Delay+0x28>
  {
  }
}
 81007dc:	bf00      	nop
 81007de:	bf00      	nop
 81007e0:	3710      	adds	r7, #16
 81007e2:	46bd      	mov	sp, r7
 81007e4:	bd80      	pop	{r7, pc}
 81007e6:	bf00      	nop
 81007e8:	1000000c 	.word	0x1000000c

081007ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007ec:	b480      	push	{r7}
 81007ee:	b085      	sub	sp, #20
 81007f0:	af00      	add	r7, sp, #0
 81007f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81007f4:	687b      	ldr	r3, [r7, #4]
 81007f6:	f003 0307 	and.w	r3, r3, #7
 81007fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81007fc:	4b0c      	ldr	r3, [pc, #48]	; (8100830 <__NVIC_SetPriorityGrouping+0x44>)
 81007fe:	68db      	ldr	r3, [r3, #12]
 8100800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100802:	68ba      	ldr	r2, [r7, #8]
 8100804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100808:	4013      	ands	r3, r2
 810080a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810080c:	68fb      	ldr	r3, [r7, #12]
 810080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100810:	68bb      	ldr	r3, [r7, #8]
 8100812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810081c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810081e:	4a04      	ldr	r2, [pc, #16]	; (8100830 <__NVIC_SetPriorityGrouping+0x44>)
 8100820:	68bb      	ldr	r3, [r7, #8]
 8100822:	60d3      	str	r3, [r2, #12]
}
 8100824:	bf00      	nop
 8100826:	3714      	adds	r7, #20
 8100828:	46bd      	mov	sp, r7
 810082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810082e:	4770      	bx	lr
 8100830:	e000ed00 	.word	0xe000ed00

08100834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100834:	b480      	push	{r7}
 8100836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100838:	4b04      	ldr	r3, [pc, #16]	; (810084c <__NVIC_GetPriorityGrouping+0x18>)
 810083a:	68db      	ldr	r3, [r3, #12]
 810083c:	0a1b      	lsrs	r3, r3, #8
 810083e:	f003 0307 	and.w	r3, r3, #7
}
 8100842:	4618      	mov	r0, r3
 8100844:	46bd      	mov	sp, r7
 8100846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810084a:	4770      	bx	lr
 810084c:	e000ed00 	.word	0xe000ed00

08100850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100850:	b480      	push	{r7}
 8100852:	b083      	sub	sp, #12
 8100854:	af00      	add	r7, sp, #0
 8100856:	4603      	mov	r3, r0
 8100858:	6039      	str	r1, [r7, #0]
 810085a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810085c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100860:	2b00      	cmp	r3, #0
 8100862:	db0a      	blt.n	810087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100864:	683b      	ldr	r3, [r7, #0]
 8100866:	b2da      	uxtb	r2, r3
 8100868:	490c      	ldr	r1, [pc, #48]	; (810089c <__NVIC_SetPriority+0x4c>)
 810086a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810086e:	0112      	lsls	r2, r2, #4
 8100870:	b2d2      	uxtb	r2, r2
 8100872:	440b      	add	r3, r1
 8100874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100878:	e00a      	b.n	8100890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810087a:	683b      	ldr	r3, [r7, #0]
 810087c:	b2da      	uxtb	r2, r3
 810087e:	4908      	ldr	r1, [pc, #32]	; (81008a0 <__NVIC_SetPriority+0x50>)
 8100880:	88fb      	ldrh	r3, [r7, #6]
 8100882:	f003 030f 	and.w	r3, r3, #15
 8100886:	3b04      	subs	r3, #4
 8100888:	0112      	lsls	r2, r2, #4
 810088a:	b2d2      	uxtb	r2, r2
 810088c:	440b      	add	r3, r1
 810088e:	761a      	strb	r2, [r3, #24]
}
 8100890:	bf00      	nop
 8100892:	370c      	adds	r7, #12
 8100894:	46bd      	mov	sp, r7
 8100896:	f85d 7b04 	ldr.w	r7, [sp], #4
 810089a:	4770      	bx	lr
 810089c:	e000e100 	.word	0xe000e100
 81008a0:	e000ed00 	.word	0xe000ed00

081008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81008a4:	b480      	push	{r7}
 81008a6:	b089      	sub	sp, #36	; 0x24
 81008a8:	af00      	add	r7, sp, #0
 81008aa:	60f8      	str	r0, [r7, #12]
 81008ac:	60b9      	str	r1, [r7, #8]
 81008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81008b0:	68fb      	ldr	r3, [r7, #12]
 81008b2:	f003 0307 	and.w	r3, r3, #7
 81008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81008b8:	69fb      	ldr	r3, [r7, #28]
 81008ba:	f1c3 0307 	rsb	r3, r3, #7
 81008be:	2b04      	cmp	r3, #4
 81008c0:	bf28      	it	cs
 81008c2:	2304      	movcs	r3, #4
 81008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81008c6:	69fb      	ldr	r3, [r7, #28]
 81008c8:	3304      	adds	r3, #4
 81008ca:	2b06      	cmp	r3, #6
 81008cc:	d902      	bls.n	81008d4 <NVIC_EncodePriority+0x30>
 81008ce:	69fb      	ldr	r3, [r7, #28]
 81008d0:	3b03      	subs	r3, #3
 81008d2:	e000      	b.n	81008d6 <NVIC_EncodePriority+0x32>
 81008d4:	2300      	movs	r3, #0
 81008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81008d8:	f04f 32ff 	mov.w	r2, #4294967295
 81008dc:	69bb      	ldr	r3, [r7, #24]
 81008de:	fa02 f303 	lsl.w	r3, r2, r3
 81008e2:	43da      	mvns	r2, r3
 81008e4:	68bb      	ldr	r3, [r7, #8]
 81008e6:	401a      	ands	r2, r3
 81008e8:	697b      	ldr	r3, [r7, #20]
 81008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81008ec:	f04f 31ff 	mov.w	r1, #4294967295
 81008f0:	697b      	ldr	r3, [r7, #20]
 81008f2:	fa01 f303 	lsl.w	r3, r1, r3
 81008f6:	43d9      	mvns	r1, r3
 81008f8:	687b      	ldr	r3, [r7, #4]
 81008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81008fc:	4313      	orrs	r3, r2
         );
}
 81008fe:	4618      	mov	r0, r3
 8100900:	3724      	adds	r7, #36	; 0x24
 8100902:	46bd      	mov	sp, r7
 8100904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100908:	4770      	bx	lr
	...

0810090c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810090c:	b580      	push	{r7, lr}
 810090e:	b082      	sub	sp, #8
 8100910:	af00      	add	r7, sp, #0
 8100912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100914:	687b      	ldr	r3, [r7, #4]
 8100916:	3b01      	subs	r3, #1
 8100918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810091c:	d301      	bcc.n	8100922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810091e:	2301      	movs	r3, #1
 8100920:	e00f      	b.n	8100942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100922:	4a0a      	ldr	r2, [pc, #40]	; (810094c <SysTick_Config+0x40>)
 8100924:	687b      	ldr	r3, [r7, #4]
 8100926:	3b01      	subs	r3, #1
 8100928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810092a:	210f      	movs	r1, #15
 810092c:	f04f 30ff 	mov.w	r0, #4294967295
 8100930:	f7ff ff8e 	bl	8100850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100934:	4b05      	ldr	r3, [pc, #20]	; (810094c <SysTick_Config+0x40>)
 8100936:	2200      	movs	r2, #0
 8100938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810093a:	4b04      	ldr	r3, [pc, #16]	; (810094c <SysTick_Config+0x40>)
 810093c:	2207      	movs	r2, #7
 810093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100940:	2300      	movs	r3, #0
}
 8100942:	4618      	mov	r0, r3
 8100944:	3708      	adds	r7, #8
 8100946:	46bd      	mov	sp, r7
 8100948:	bd80      	pop	{r7, pc}
 810094a:	bf00      	nop
 810094c:	e000e010 	.word	0xe000e010

08100950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100950:	b580      	push	{r7, lr}
 8100952:	b082      	sub	sp, #8
 8100954:	af00      	add	r7, sp, #0
 8100956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100958:	6878      	ldr	r0, [r7, #4]
 810095a:	f7ff ff47 	bl	81007ec <__NVIC_SetPriorityGrouping>
}
 810095e:	bf00      	nop
 8100960:	3708      	adds	r7, #8
 8100962:	46bd      	mov	sp, r7
 8100964:	bd80      	pop	{r7, pc}

08100966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100966:	b580      	push	{r7, lr}
 8100968:	b086      	sub	sp, #24
 810096a:	af00      	add	r7, sp, #0
 810096c:	4603      	mov	r3, r0
 810096e:	60b9      	str	r1, [r7, #8]
 8100970:	607a      	str	r2, [r7, #4]
 8100972:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100974:	f7ff ff5e 	bl	8100834 <__NVIC_GetPriorityGrouping>
 8100978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810097a:	687a      	ldr	r2, [r7, #4]
 810097c:	68b9      	ldr	r1, [r7, #8]
 810097e:	6978      	ldr	r0, [r7, #20]
 8100980:	f7ff ff90 	bl	81008a4 <NVIC_EncodePriority>
 8100984:	4602      	mov	r2, r0
 8100986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810098a:	4611      	mov	r1, r2
 810098c:	4618      	mov	r0, r3
 810098e:	f7ff ff5f 	bl	8100850 <__NVIC_SetPriority>
}
 8100992:	bf00      	nop
 8100994:	3718      	adds	r7, #24
 8100996:	46bd      	mov	sp, r7
 8100998:	bd80      	pop	{r7, pc}

0810099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810099a:	b580      	push	{r7, lr}
 810099c:	b082      	sub	sp, #8
 810099e:	af00      	add	r7, sp, #0
 81009a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81009a2:	6878      	ldr	r0, [r7, #4]
 81009a4:	f7ff ffb2 	bl	810090c <SysTick_Config>
 81009a8:	4603      	mov	r3, r0
}
 81009aa:	4618      	mov	r0, r3
 81009ac:	3708      	adds	r7, #8
 81009ae:	46bd      	mov	sp, r7
 81009b0:	bd80      	pop	{r7, pc}
	...

081009b4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81009b4:	b480      	push	{r7}
 81009b6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81009b8:	4b07      	ldr	r3, [pc, #28]	; (81009d8 <HAL_GetCurrentCPUID+0x24>)
 81009ba:	681b      	ldr	r3, [r3, #0]
 81009bc:	091b      	lsrs	r3, r3, #4
 81009be:	f003 030f 	and.w	r3, r3, #15
 81009c2:	2b07      	cmp	r3, #7
 81009c4:	d101      	bne.n	81009ca <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81009c6:	2303      	movs	r3, #3
 81009c8:	e000      	b.n	81009cc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81009ca:	2301      	movs	r3, #1
  }
}
 81009cc:	4618      	mov	r0, r3
 81009ce:	46bd      	mov	sp, r7
 81009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009d4:	4770      	bx	lr
 81009d6:	bf00      	nop
 81009d8:	e000ed00 	.word	0xe000ed00

081009dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81009dc:	b480      	push	{r7}
 81009de:	b085      	sub	sp, #20
 81009e0:	af00      	add	r7, sp, #0
 81009e2:	6078      	str	r0, [r7, #4]
 81009e4:	460b      	mov	r3, r1
 81009e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81009e8:	687b      	ldr	r3, [r7, #4]
 81009ea:	695b      	ldr	r3, [r3, #20]
 81009ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81009ee:	887a      	ldrh	r2, [r7, #2]
 81009f0:	68fb      	ldr	r3, [r7, #12]
 81009f2:	4013      	ands	r3, r2
 81009f4:	041a      	lsls	r2, r3, #16
 81009f6:	68fb      	ldr	r3, [r7, #12]
 81009f8:	43d9      	mvns	r1, r3
 81009fa:	887b      	ldrh	r3, [r7, #2]
 81009fc:	400b      	ands	r3, r1
 81009fe:	431a      	orrs	r2, r3
 8100a00:	687b      	ldr	r3, [r7, #4]
 8100a02:	619a      	str	r2, [r3, #24]
}
 8100a04:	bf00      	nop
 8100a06:	3714      	adds	r7, #20
 8100a08:	46bd      	mov	sp, r7
 8100a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a0e:	4770      	bx	lr

08100a10 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100a10:	b480      	push	{r7}
 8100a12:	b083      	sub	sp, #12
 8100a14:	af00      	add	r7, sp, #0
 8100a16:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100a18:	4b05      	ldr	r3, [pc, #20]	; (8100a30 <HAL_HSEM_ActivateNotification+0x20>)
 8100a1a:	681a      	ldr	r2, [r3, #0]
 8100a1c:	4904      	ldr	r1, [pc, #16]	; (8100a30 <HAL_HSEM_ActivateNotification+0x20>)
 8100a1e:	687b      	ldr	r3, [r7, #4]
 8100a20:	4313      	orrs	r3, r2
 8100a22:	600b      	str	r3, [r1, #0]
#endif
}
 8100a24:	bf00      	nop
 8100a26:	370c      	adds	r7, #12
 8100a28:	46bd      	mov	sp, r7
 8100a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a2e:	4770      	bx	lr
 8100a30:	58026510 	.word	0x58026510

08100a34 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100a34:	b580      	push	{r7, lr}
 8100a36:	b084      	sub	sp, #16
 8100a38:	af00      	add	r7, sp, #0
 8100a3a:	60f8      	str	r0, [r7, #12]
 8100a3c:	460b      	mov	r3, r1
 8100a3e:	607a      	str	r2, [r7, #4]
 8100a40:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100a42:	4b37      	ldr	r3, [pc, #220]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100a44:	681b      	ldr	r3, [r3, #0]
 8100a46:	f023 0201 	bic.w	r2, r3, #1
 8100a4a:	4935      	ldr	r1, [pc, #212]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100a4c:	68fb      	ldr	r3, [r7, #12]
 8100a4e:	4313      	orrs	r3, r2
 8100a50:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100a52:	687b      	ldr	r3, [r7, #4]
 8100a54:	2b00      	cmp	r3, #0
 8100a56:	d123      	bne.n	8100aa0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100a58:	f7ff ffac 	bl	81009b4 <HAL_GetCurrentCPUID>
 8100a5c:	4603      	mov	r3, r0
 8100a5e:	2b03      	cmp	r3, #3
 8100a60:	d158      	bne.n	8100b14 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100a62:	4b2f      	ldr	r3, [pc, #188]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100a64:	691b      	ldr	r3, [r3, #16]
 8100a66:	4a2e      	ldr	r2, [pc, #184]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100a68:	f023 0301 	bic.w	r3, r3, #1
 8100a6c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100a6e:	4b2d      	ldr	r3, [pc, #180]	; (8100b24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100a70:	691b      	ldr	r3, [r3, #16]
 8100a72:	4a2c      	ldr	r2, [pc, #176]	; (8100b24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100a74:	f043 0304 	orr.w	r3, r3, #4
 8100a78:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100a7a:	f3bf 8f4f 	dsb	sy
}
 8100a7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100a80:	f3bf 8f6f 	isb	sy
}
 8100a84:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100a86:	7afb      	ldrb	r3, [r7, #11]
 8100a88:	2b01      	cmp	r3, #1
 8100a8a:	d101      	bne.n	8100a90 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100a8c:	bf30      	wfi
 8100a8e:	e000      	b.n	8100a92 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100a90:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100a92:	4b24      	ldr	r3, [pc, #144]	; (8100b24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100a94:	691b      	ldr	r3, [r3, #16]
 8100a96:	4a23      	ldr	r2, [pc, #140]	; (8100b24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100a98:	f023 0304 	bic.w	r3, r3, #4
 8100a9c:	6113      	str	r3, [r2, #16]
 8100a9e:	e03c      	b.n	8100b1a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100aa0:	687b      	ldr	r3, [r7, #4]
 8100aa2:	2b01      	cmp	r3, #1
 8100aa4:	d123      	bne.n	8100aee <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100aa6:	f7ff ff85 	bl	81009b4 <HAL_GetCurrentCPUID>
 8100aaa:	4603      	mov	r3, r0
 8100aac:	2b01      	cmp	r3, #1
 8100aae:	d133      	bne.n	8100b18 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100ab0:	4b1b      	ldr	r3, [pc, #108]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ab2:	695b      	ldr	r3, [r3, #20]
 8100ab4:	4a1a      	ldr	r2, [pc, #104]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ab6:	f023 0302 	bic.w	r3, r3, #2
 8100aba:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100abc:	4b19      	ldr	r3, [pc, #100]	; (8100b24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100abe:	691b      	ldr	r3, [r3, #16]
 8100ac0:	4a18      	ldr	r2, [pc, #96]	; (8100b24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ac2:	f043 0304 	orr.w	r3, r3, #4
 8100ac6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100ac8:	f3bf 8f4f 	dsb	sy
}
 8100acc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100ace:	f3bf 8f6f 	isb	sy
}
 8100ad2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100ad4:	7afb      	ldrb	r3, [r7, #11]
 8100ad6:	2b01      	cmp	r3, #1
 8100ad8:	d101      	bne.n	8100ade <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100ada:	bf30      	wfi
 8100adc:	e000      	b.n	8100ae0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100ade:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100ae0:	4b10      	ldr	r3, [pc, #64]	; (8100b24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ae2:	691b      	ldr	r3, [r3, #16]
 8100ae4:	4a0f      	ldr	r2, [pc, #60]	; (8100b24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ae6:	f023 0304 	bic.w	r3, r3, #4
 8100aea:	6113      	str	r3, [r2, #16]
 8100aec:	e015      	b.n	8100b1a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100aee:	f7ff ff61 	bl	81009b4 <HAL_GetCurrentCPUID>
 8100af2:	4603      	mov	r3, r0
 8100af4:	2b03      	cmp	r3, #3
 8100af6:	d106      	bne.n	8100b06 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100af8:	4b09      	ldr	r3, [pc, #36]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100afa:	691b      	ldr	r3, [r3, #16]
 8100afc:	4a08      	ldr	r2, [pc, #32]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100afe:	f023 0304 	bic.w	r3, r3, #4
 8100b02:	6113      	str	r3, [r2, #16]
 8100b04:	e009      	b.n	8100b1a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100b06:	4b06      	ldr	r3, [pc, #24]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100b08:	695b      	ldr	r3, [r3, #20]
 8100b0a:	4a05      	ldr	r2, [pc, #20]	; (8100b20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100b0c:	f023 0304 	bic.w	r3, r3, #4
 8100b10:	6153      	str	r3, [r2, #20]
 8100b12:	e002      	b.n	8100b1a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100b14:	bf00      	nop
 8100b16:	e000      	b.n	8100b1a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100b18:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100b1a:	3710      	adds	r7, #16
 8100b1c:	46bd      	mov	sp, r7
 8100b1e:	bd80      	pop	{r7, pc}
 8100b20:	58024800 	.word	0x58024800
 8100b24:	e000ed00 	.word	0xe000ed00

08100b28 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100b28:	b580      	push	{r7, lr}
 8100b2a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100b2c:	f7ff ff42 	bl	81009b4 <HAL_GetCurrentCPUID>
 8100b30:	4603      	mov	r3, r0
 8100b32:	2b03      	cmp	r3, #3
 8100b34:	d101      	bne.n	8100b3a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100b36:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100b38:	e001      	b.n	8100b3e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100b3a:	bf40      	sev
    __WFE ();
 8100b3c:	bf20      	wfe
}
 8100b3e:	bf00      	nop
 8100b40:	bd80      	pop	{r7, pc}
	...

08100b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100b44:	b480      	push	{r7}
 8100b46:	b089      	sub	sp, #36	; 0x24
 8100b48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100b4a:	4bb3      	ldr	r3, [pc, #716]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b4c:	691b      	ldr	r3, [r3, #16]
 8100b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100b52:	2b18      	cmp	r3, #24
 8100b54:	f200 8155 	bhi.w	8100e02 <HAL_RCC_GetSysClockFreq+0x2be>
 8100b58:	a201      	add	r2, pc, #4	; (adr r2, 8100b60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100b5e:	bf00      	nop
 8100b60:	08100bc5 	.word	0x08100bc5
 8100b64:	08100e03 	.word	0x08100e03
 8100b68:	08100e03 	.word	0x08100e03
 8100b6c:	08100e03 	.word	0x08100e03
 8100b70:	08100e03 	.word	0x08100e03
 8100b74:	08100e03 	.word	0x08100e03
 8100b78:	08100e03 	.word	0x08100e03
 8100b7c:	08100e03 	.word	0x08100e03
 8100b80:	08100beb 	.word	0x08100beb
 8100b84:	08100e03 	.word	0x08100e03
 8100b88:	08100e03 	.word	0x08100e03
 8100b8c:	08100e03 	.word	0x08100e03
 8100b90:	08100e03 	.word	0x08100e03
 8100b94:	08100e03 	.word	0x08100e03
 8100b98:	08100e03 	.word	0x08100e03
 8100b9c:	08100e03 	.word	0x08100e03
 8100ba0:	08100bf1 	.word	0x08100bf1
 8100ba4:	08100e03 	.word	0x08100e03
 8100ba8:	08100e03 	.word	0x08100e03
 8100bac:	08100e03 	.word	0x08100e03
 8100bb0:	08100e03 	.word	0x08100e03
 8100bb4:	08100e03 	.word	0x08100e03
 8100bb8:	08100e03 	.word	0x08100e03
 8100bbc:	08100e03 	.word	0x08100e03
 8100bc0:	08100bf7 	.word	0x08100bf7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100bc4:	4b94      	ldr	r3, [pc, #592]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bc6:	681b      	ldr	r3, [r3, #0]
 8100bc8:	f003 0320 	and.w	r3, r3, #32
 8100bcc:	2b00      	cmp	r3, #0
 8100bce:	d009      	beq.n	8100be4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100bd0:	4b91      	ldr	r3, [pc, #580]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bd2:	681b      	ldr	r3, [r3, #0]
 8100bd4:	08db      	lsrs	r3, r3, #3
 8100bd6:	f003 0303 	and.w	r3, r3, #3
 8100bda:	4a90      	ldr	r2, [pc, #576]	; (8100e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8100be0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100be2:	e111      	b.n	8100e08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100be4:	4b8d      	ldr	r3, [pc, #564]	; (8100e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100be6:	61bb      	str	r3, [r7, #24]
      break;
 8100be8:	e10e      	b.n	8100e08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100bea:	4b8d      	ldr	r3, [pc, #564]	; (8100e20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100bec:	61bb      	str	r3, [r7, #24]
      break;
 8100bee:	e10b      	b.n	8100e08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100bf0:	4b8c      	ldr	r3, [pc, #560]	; (8100e24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100bf2:	61bb      	str	r3, [r7, #24]
      break;
 8100bf4:	e108      	b.n	8100e08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100bf6:	4b88      	ldr	r3, [pc, #544]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100bfa:	f003 0303 	and.w	r3, r3, #3
 8100bfe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100c00:	4b85      	ldr	r3, [pc, #532]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100c04:	091b      	lsrs	r3, r3, #4
 8100c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100c0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100c0c:	4b82      	ldr	r3, [pc, #520]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100c10:	f003 0301 	and.w	r3, r3, #1
 8100c14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100c16:	4b80      	ldr	r3, [pc, #512]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100c1a:	08db      	lsrs	r3, r3, #3
 8100c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100c20:	68fa      	ldr	r2, [r7, #12]
 8100c22:	fb02 f303 	mul.w	r3, r2, r3
 8100c26:	ee07 3a90 	vmov	s15, r3
 8100c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100c2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100c32:	693b      	ldr	r3, [r7, #16]
 8100c34:	2b00      	cmp	r3, #0
 8100c36:	f000 80e1 	beq.w	8100dfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8100c3a:	697b      	ldr	r3, [r7, #20]
 8100c3c:	2b02      	cmp	r3, #2
 8100c3e:	f000 8083 	beq.w	8100d48 <HAL_RCC_GetSysClockFreq+0x204>
 8100c42:	697b      	ldr	r3, [r7, #20]
 8100c44:	2b02      	cmp	r3, #2
 8100c46:	f200 80a1 	bhi.w	8100d8c <HAL_RCC_GetSysClockFreq+0x248>
 8100c4a:	697b      	ldr	r3, [r7, #20]
 8100c4c:	2b00      	cmp	r3, #0
 8100c4e:	d003      	beq.n	8100c58 <HAL_RCC_GetSysClockFreq+0x114>
 8100c50:	697b      	ldr	r3, [r7, #20]
 8100c52:	2b01      	cmp	r3, #1
 8100c54:	d056      	beq.n	8100d04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100c56:	e099      	b.n	8100d8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100c58:	4b6f      	ldr	r3, [pc, #444]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c5a:	681b      	ldr	r3, [r3, #0]
 8100c5c:	f003 0320 	and.w	r3, r3, #32
 8100c60:	2b00      	cmp	r3, #0
 8100c62:	d02d      	beq.n	8100cc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100c64:	4b6c      	ldr	r3, [pc, #432]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c66:	681b      	ldr	r3, [r3, #0]
 8100c68:	08db      	lsrs	r3, r3, #3
 8100c6a:	f003 0303 	and.w	r3, r3, #3
 8100c6e:	4a6b      	ldr	r2, [pc, #428]	; (8100e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100c70:	fa22 f303 	lsr.w	r3, r2, r3
 8100c74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100c76:	687b      	ldr	r3, [r7, #4]
 8100c78:	ee07 3a90 	vmov	s15, r3
 8100c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100c80:	693b      	ldr	r3, [r7, #16]
 8100c82:	ee07 3a90 	vmov	s15, r3
 8100c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100c8e:	4b62      	ldr	r3, [pc, #392]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100c96:	ee07 3a90 	vmov	s15, r3
 8100c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100ca2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8100e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100cba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100cbe:	e087      	b.n	8100dd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100cc0:	693b      	ldr	r3, [r7, #16]
 8100cc2:	ee07 3a90 	vmov	s15, r3
 8100cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100cca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8100e2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8100cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100cd2:	4b51      	ldr	r3, [pc, #324]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100cda:	ee07 3a90 	vmov	s15, r3
 8100cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100ce6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8100e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100d02:	e065      	b.n	8100dd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100d04:	693b      	ldr	r3, [r7, #16]
 8100d06:	ee07 3a90 	vmov	s15, r3
 8100d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100d0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8100e30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100d16:	4b40      	ldr	r3, [pc, #256]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100d1e:	ee07 3a90 	vmov	s15, r3
 8100d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8100d2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8100e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100d46:	e043      	b.n	8100dd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100d48:	693b      	ldr	r3, [r7, #16]
 8100d4a:	ee07 3a90 	vmov	s15, r3
 8100d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100d52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8100e34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100d5a:	4b2f      	ldr	r3, [pc, #188]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100d62:	ee07 3a90 	vmov	s15, r3
 8100d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100d6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8100e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100d8a:	e021      	b.n	8100dd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100d8c:	693b      	ldr	r3, [r7, #16]
 8100d8e:	ee07 3a90 	vmov	s15, r3
 8100d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100d96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8100e30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100d9e:	4b1e      	ldr	r3, [pc, #120]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100da6:	ee07 3a90 	vmov	s15, r3
 8100daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8100db2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8100e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100dca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100dce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8100dd0:	4b11      	ldr	r3, [pc, #68]	; (8100e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100dd4:	0a5b      	lsrs	r3, r3, #9
 8100dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100dda:	3301      	adds	r3, #1
 8100ddc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8100dde:	683b      	ldr	r3, [r7, #0]
 8100de0:	ee07 3a90 	vmov	s15, r3
 8100de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8100dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100df4:	ee17 3a90 	vmov	r3, s15
 8100df8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8100dfa:	e005      	b.n	8100e08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8100dfc:	2300      	movs	r3, #0
 8100dfe:	61bb      	str	r3, [r7, #24]
      break;
 8100e00:	e002      	b.n	8100e08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8100e02:	4b07      	ldr	r3, [pc, #28]	; (8100e20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100e04:	61bb      	str	r3, [r7, #24]
      break;
 8100e06:	bf00      	nop
  }

  return sysclockfreq;
 8100e08:	69bb      	ldr	r3, [r7, #24]
}
 8100e0a:	4618      	mov	r0, r3
 8100e0c:	3724      	adds	r7, #36	; 0x24
 8100e0e:	46bd      	mov	sp, r7
 8100e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e14:	4770      	bx	lr
 8100e16:	bf00      	nop
 8100e18:	58024400 	.word	0x58024400
 8100e1c:	03d09000 	.word	0x03d09000
 8100e20:	003d0900 	.word	0x003d0900
 8100e24:	007a1200 	.word	0x007a1200
 8100e28:	46000000 	.word	0x46000000
 8100e2c:	4c742400 	.word	0x4c742400
 8100e30:	4a742400 	.word	0x4a742400
 8100e34:	4af42400 	.word	0x4af42400

08100e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8100e38:	b580      	push	{r7, lr}
 8100e3a:	b082      	sub	sp, #8
 8100e3c:	af00      	add	r7, sp, #0
 8100e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8100e40:	687b      	ldr	r3, [r7, #4]
 8100e42:	2b00      	cmp	r3, #0
 8100e44:	d101      	bne.n	8100e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8100e46:	2301      	movs	r3, #1
 8100e48:	e049      	b.n	8100ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8100e50:	b2db      	uxtb	r3, r3
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	d106      	bne.n	8100e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8100e56:	687b      	ldr	r3, [r7, #4]
 8100e58:	2200      	movs	r2, #0
 8100e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8100e5e:	6878      	ldr	r0, [r7, #4]
 8100e60:	f7ff fb8a 	bl	8100578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8100e64:	687b      	ldr	r3, [r7, #4]
 8100e66:	2202      	movs	r2, #2
 8100e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	681a      	ldr	r2, [r3, #0]
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	3304      	adds	r3, #4
 8100e74:	4619      	mov	r1, r3
 8100e76:	4610      	mov	r0, r2
 8100e78:	f000 f92e 	bl	81010d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8100e7c:	687b      	ldr	r3, [r7, #4]
 8100e7e:	2201      	movs	r2, #1
 8100e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8100e84:	687b      	ldr	r3, [r7, #4]
 8100e86:	2201      	movs	r2, #1
 8100e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8100e8c:	687b      	ldr	r3, [r7, #4]
 8100e8e:	2201      	movs	r2, #1
 8100e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8100e94:	687b      	ldr	r3, [r7, #4]
 8100e96:	2201      	movs	r2, #1
 8100e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	2201      	movs	r2, #1
 8100ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8100ea4:	687b      	ldr	r3, [r7, #4]
 8100ea6:	2201      	movs	r2, #1
 8100ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8100eac:	687b      	ldr	r3, [r7, #4]
 8100eae:	2201      	movs	r2, #1
 8100eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8100eb4:	687b      	ldr	r3, [r7, #4]
 8100eb6:	2201      	movs	r2, #1
 8100eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8100ebc:	687b      	ldr	r3, [r7, #4]
 8100ebe:	2201      	movs	r2, #1
 8100ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8100ec4:	687b      	ldr	r3, [r7, #4]
 8100ec6:	2201      	movs	r2, #1
 8100ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8100ecc:	687b      	ldr	r3, [r7, #4]
 8100ece:	2201      	movs	r2, #1
 8100ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8100ed4:	687b      	ldr	r3, [r7, #4]
 8100ed6:	2201      	movs	r2, #1
 8100ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8100edc:	2300      	movs	r3, #0
}
 8100ede:	4618      	mov	r0, r3
 8100ee0:	3708      	adds	r7, #8
 8100ee2:	46bd      	mov	sp, r7
 8100ee4:	bd80      	pop	{r7, pc}
	...

08100ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8100ee8:	b580      	push	{r7, lr}
 8100eea:	b084      	sub	sp, #16
 8100eec:	af00      	add	r7, sp, #0
 8100eee:	6078      	str	r0, [r7, #4]
 8100ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8100ef2:	2300      	movs	r3, #0
 8100ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8100ef6:	687b      	ldr	r3, [r7, #4]
 8100ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8100efc:	2b01      	cmp	r3, #1
 8100efe:	d101      	bne.n	8100f04 <HAL_TIM_ConfigClockSource+0x1c>
 8100f00:	2302      	movs	r3, #2
 8100f02:	e0de      	b.n	81010c2 <HAL_TIM_ConfigClockSource+0x1da>
 8100f04:	687b      	ldr	r3, [r7, #4]
 8100f06:	2201      	movs	r2, #1
 8100f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8100f0c:	687b      	ldr	r3, [r7, #4]
 8100f0e:	2202      	movs	r2, #2
 8100f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8100f14:	687b      	ldr	r3, [r7, #4]
 8100f16:	681b      	ldr	r3, [r3, #0]
 8100f18:	689b      	ldr	r3, [r3, #8]
 8100f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8100f1c:	68bb      	ldr	r3, [r7, #8]
 8100f1e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8100f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8100f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8100f28:	68bb      	ldr	r3, [r7, #8]
 8100f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8100f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	681b      	ldr	r3, [r3, #0]
 8100f34:	68ba      	ldr	r2, [r7, #8]
 8100f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8100f38:	683b      	ldr	r3, [r7, #0]
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	4a63      	ldr	r2, [pc, #396]	; (81010cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8100f3e:	4293      	cmp	r3, r2
 8100f40:	f000 80a9 	beq.w	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100f44:	4a61      	ldr	r2, [pc, #388]	; (81010cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8100f46:	4293      	cmp	r3, r2
 8100f48:	f200 80ae 	bhi.w	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100f4c:	4a60      	ldr	r2, [pc, #384]	; (81010d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8100f4e:	4293      	cmp	r3, r2
 8100f50:	f000 80a1 	beq.w	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100f54:	4a5e      	ldr	r2, [pc, #376]	; (81010d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8100f56:	4293      	cmp	r3, r2
 8100f58:	f200 80a6 	bhi.w	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100f5c:	4a5d      	ldr	r2, [pc, #372]	; (81010d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8100f5e:	4293      	cmp	r3, r2
 8100f60:	f000 8099 	beq.w	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100f64:	4a5b      	ldr	r2, [pc, #364]	; (81010d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8100f66:	4293      	cmp	r3, r2
 8100f68:	f200 809e 	bhi.w	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100f6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8100f70:	f000 8091 	beq.w	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100f74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8100f78:	f200 8096 	bhi.w	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8100f80:	f000 8089 	beq.w	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8100f88:	f200 808e 	bhi.w	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8100f90:	d03e      	beq.n	8101010 <HAL_TIM_ConfigClockSource+0x128>
 8100f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8100f96:	f200 8087 	bhi.w	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8100f9e:	f000 8086 	beq.w	81010ae <HAL_TIM_ConfigClockSource+0x1c6>
 8100fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8100fa6:	d87f      	bhi.n	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100fa8:	2b70      	cmp	r3, #112	; 0x70
 8100faa:	d01a      	beq.n	8100fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8100fac:	2b70      	cmp	r3, #112	; 0x70
 8100fae:	d87b      	bhi.n	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100fb0:	2b60      	cmp	r3, #96	; 0x60
 8100fb2:	d050      	beq.n	8101056 <HAL_TIM_ConfigClockSource+0x16e>
 8100fb4:	2b60      	cmp	r3, #96	; 0x60
 8100fb6:	d877      	bhi.n	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100fb8:	2b50      	cmp	r3, #80	; 0x50
 8100fba:	d03c      	beq.n	8101036 <HAL_TIM_ConfigClockSource+0x14e>
 8100fbc:	2b50      	cmp	r3, #80	; 0x50
 8100fbe:	d873      	bhi.n	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100fc0:	2b40      	cmp	r3, #64	; 0x40
 8100fc2:	d058      	beq.n	8101076 <HAL_TIM_ConfigClockSource+0x18e>
 8100fc4:	2b40      	cmp	r3, #64	; 0x40
 8100fc6:	d86f      	bhi.n	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100fc8:	2b30      	cmp	r3, #48	; 0x30
 8100fca:	d064      	beq.n	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100fcc:	2b30      	cmp	r3, #48	; 0x30
 8100fce:	d86b      	bhi.n	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100fd0:	2b20      	cmp	r3, #32
 8100fd2:	d060      	beq.n	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100fd4:	2b20      	cmp	r3, #32
 8100fd6:	d867      	bhi.n	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
 8100fd8:	2b00      	cmp	r3, #0
 8100fda:	d05c      	beq.n	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100fdc:	2b10      	cmp	r3, #16
 8100fde:	d05a      	beq.n	8101096 <HAL_TIM_ConfigClockSource+0x1ae>
 8100fe0:	e062      	b.n	81010a8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8100fe2:	687b      	ldr	r3, [r7, #4]
 8100fe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8100fe6:	683b      	ldr	r3, [r7, #0]
 8100fe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8100fea:	683b      	ldr	r3, [r7, #0]
 8100fec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8100fee:	683b      	ldr	r3, [r7, #0]
 8100ff0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8100ff2:	f000 f987 	bl	8101304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	681b      	ldr	r3, [r3, #0]
 8100ffa:	689b      	ldr	r3, [r3, #8]
 8100ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8100ffe:	68bb      	ldr	r3, [r7, #8]
 8101000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8101004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8101006:	687b      	ldr	r3, [r7, #4]
 8101008:	681b      	ldr	r3, [r3, #0]
 810100a:	68ba      	ldr	r2, [r7, #8]
 810100c:	609a      	str	r2, [r3, #8]
      break;
 810100e:	e04f      	b.n	81010b0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8101010:	687b      	ldr	r3, [r7, #4]
 8101012:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8101014:	683b      	ldr	r3, [r7, #0]
 8101016:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8101018:	683b      	ldr	r3, [r7, #0]
 810101a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810101c:	683b      	ldr	r3, [r7, #0]
 810101e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8101020:	f000 f970 	bl	8101304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8101024:	687b      	ldr	r3, [r7, #4]
 8101026:	681b      	ldr	r3, [r3, #0]
 8101028:	689a      	ldr	r2, [r3, #8]
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	681b      	ldr	r3, [r3, #0]
 810102e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8101032:	609a      	str	r2, [r3, #8]
      break;
 8101034:	e03c      	b.n	81010b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8101036:	687b      	ldr	r3, [r7, #4]
 8101038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810103a:	683b      	ldr	r3, [r7, #0]
 810103c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810103e:	683b      	ldr	r3, [r7, #0]
 8101040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8101042:	461a      	mov	r2, r3
 8101044:	f000 f8e2 	bl	810120c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8101048:	687b      	ldr	r3, [r7, #4]
 810104a:	681b      	ldr	r3, [r3, #0]
 810104c:	2150      	movs	r1, #80	; 0x50
 810104e:	4618      	mov	r0, r3
 8101050:	f000 f93b 	bl	81012ca <TIM_ITRx_SetConfig>
      break;
 8101054:	e02c      	b.n	81010b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8101056:	687b      	ldr	r3, [r7, #4]
 8101058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810105a:	683b      	ldr	r3, [r7, #0]
 810105c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810105e:	683b      	ldr	r3, [r7, #0]
 8101060:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8101062:	461a      	mov	r2, r3
 8101064:	f000 f901 	bl	810126a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8101068:	687b      	ldr	r3, [r7, #4]
 810106a:	681b      	ldr	r3, [r3, #0]
 810106c:	2160      	movs	r1, #96	; 0x60
 810106e:	4618      	mov	r0, r3
 8101070:	f000 f92b 	bl	81012ca <TIM_ITRx_SetConfig>
      break;
 8101074:	e01c      	b.n	81010b0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810107a:	683b      	ldr	r3, [r7, #0]
 810107c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810107e:	683b      	ldr	r3, [r7, #0]
 8101080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8101082:	461a      	mov	r2, r3
 8101084:	f000 f8c2 	bl	810120c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8101088:	687b      	ldr	r3, [r7, #4]
 810108a:	681b      	ldr	r3, [r3, #0]
 810108c:	2140      	movs	r1, #64	; 0x40
 810108e:	4618      	mov	r0, r3
 8101090:	f000 f91b 	bl	81012ca <TIM_ITRx_SetConfig>
      break;
 8101094:	e00c      	b.n	81010b0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8101096:	687b      	ldr	r3, [r7, #4]
 8101098:	681a      	ldr	r2, [r3, #0]
 810109a:	683b      	ldr	r3, [r7, #0]
 810109c:	681b      	ldr	r3, [r3, #0]
 810109e:	4619      	mov	r1, r3
 81010a0:	4610      	mov	r0, r2
 81010a2:	f000 f912 	bl	81012ca <TIM_ITRx_SetConfig>
      break;
 81010a6:	e003      	b.n	81010b0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81010a8:	2301      	movs	r3, #1
 81010aa:	73fb      	strb	r3, [r7, #15]
      break;
 81010ac:	e000      	b.n	81010b0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81010ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81010b0:	687b      	ldr	r3, [r7, #4]
 81010b2:	2201      	movs	r2, #1
 81010b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81010b8:	687b      	ldr	r3, [r7, #4]
 81010ba:	2200      	movs	r2, #0
 81010bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 81010c2:	4618      	mov	r0, r3
 81010c4:	3710      	adds	r7, #16
 81010c6:	46bd      	mov	sp, r7
 81010c8:	bd80      	pop	{r7, pc}
 81010ca:	bf00      	nop
 81010cc:	00100040 	.word	0x00100040
 81010d0:	00100030 	.word	0x00100030
 81010d4:	00100020 	.word	0x00100020

081010d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81010d8:	b480      	push	{r7}
 81010da:	b085      	sub	sp, #20
 81010dc:	af00      	add	r7, sp, #0
 81010de:	6078      	str	r0, [r7, #4]
 81010e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81010e2:	687b      	ldr	r3, [r7, #4]
 81010e4:	681b      	ldr	r3, [r3, #0]
 81010e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81010e8:	687b      	ldr	r3, [r7, #4]
 81010ea:	4a40      	ldr	r2, [pc, #256]	; (81011ec <TIM_Base_SetConfig+0x114>)
 81010ec:	4293      	cmp	r3, r2
 81010ee:	d013      	beq.n	8101118 <TIM_Base_SetConfig+0x40>
 81010f0:	687b      	ldr	r3, [r7, #4]
 81010f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81010f6:	d00f      	beq.n	8101118 <TIM_Base_SetConfig+0x40>
 81010f8:	687b      	ldr	r3, [r7, #4]
 81010fa:	4a3d      	ldr	r2, [pc, #244]	; (81011f0 <TIM_Base_SetConfig+0x118>)
 81010fc:	4293      	cmp	r3, r2
 81010fe:	d00b      	beq.n	8101118 <TIM_Base_SetConfig+0x40>
 8101100:	687b      	ldr	r3, [r7, #4]
 8101102:	4a3c      	ldr	r2, [pc, #240]	; (81011f4 <TIM_Base_SetConfig+0x11c>)
 8101104:	4293      	cmp	r3, r2
 8101106:	d007      	beq.n	8101118 <TIM_Base_SetConfig+0x40>
 8101108:	687b      	ldr	r3, [r7, #4]
 810110a:	4a3b      	ldr	r2, [pc, #236]	; (81011f8 <TIM_Base_SetConfig+0x120>)
 810110c:	4293      	cmp	r3, r2
 810110e:	d003      	beq.n	8101118 <TIM_Base_SetConfig+0x40>
 8101110:	687b      	ldr	r3, [r7, #4]
 8101112:	4a3a      	ldr	r2, [pc, #232]	; (81011fc <TIM_Base_SetConfig+0x124>)
 8101114:	4293      	cmp	r3, r2
 8101116:	d108      	bne.n	810112a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101118:	68fb      	ldr	r3, [r7, #12]
 810111a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810111e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101120:	683b      	ldr	r3, [r7, #0]
 8101122:	685b      	ldr	r3, [r3, #4]
 8101124:	68fa      	ldr	r2, [r7, #12]
 8101126:	4313      	orrs	r3, r2
 8101128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810112a:	687b      	ldr	r3, [r7, #4]
 810112c:	4a2f      	ldr	r2, [pc, #188]	; (81011ec <TIM_Base_SetConfig+0x114>)
 810112e:	4293      	cmp	r3, r2
 8101130:	d01f      	beq.n	8101172 <TIM_Base_SetConfig+0x9a>
 8101132:	687b      	ldr	r3, [r7, #4]
 8101134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101138:	d01b      	beq.n	8101172 <TIM_Base_SetConfig+0x9a>
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	4a2c      	ldr	r2, [pc, #176]	; (81011f0 <TIM_Base_SetConfig+0x118>)
 810113e:	4293      	cmp	r3, r2
 8101140:	d017      	beq.n	8101172 <TIM_Base_SetConfig+0x9a>
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	4a2b      	ldr	r2, [pc, #172]	; (81011f4 <TIM_Base_SetConfig+0x11c>)
 8101146:	4293      	cmp	r3, r2
 8101148:	d013      	beq.n	8101172 <TIM_Base_SetConfig+0x9a>
 810114a:	687b      	ldr	r3, [r7, #4]
 810114c:	4a2a      	ldr	r2, [pc, #168]	; (81011f8 <TIM_Base_SetConfig+0x120>)
 810114e:	4293      	cmp	r3, r2
 8101150:	d00f      	beq.n	8101172 <TIM_Base_SetConfig+0x9a>
 8101152:	687b      	ldr	r3, [r7, #4]
 8101154:	4a29      	ldr	r2, [pc, #164]	; (81011fc <TIM_Base_SetConfig+0x124>)
 8101156:	4293      	cmp	r3, r2
 8101158:	d00b      	beq.n	8101172 <TIM_Base_SetConfig+0x9a>
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	4a28      	ldr	r2, [pc, #160]	; (8101200 <TIM_Base_SetConfig+0x128>)
 810115e:	4293      	cmp	r3, r2
 8101160:	d007      	beq.n	8101172 <TIM_Base_SetConfig+0x9a>
 8101162:	687b      	ldr	r3, [r7, #4]
 8101164:	4a27      	ldr	r2, [pc, #156]	; (8101204 <TIM_Base_SetConfig+0x12c>)
 8101166:	4293      	cmp	r3, r2
 8101168:	d003      	beq.n	8101172 <TIM_Base_SetConfig+0x9a>
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	4a26      	ldr	r2, [pc, #152]	; (8101208 <TIM_Base_SetConfig+0x130>)
 810116e:	4293      	cmp	r3, r2
 8101170:	d108      	bne.n	8101184 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8101172:	68fb      	ldr	r3, [r7, #12]
 8101174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810117a:	683b      	ldr	r3, [r7, #0]
 810117c:	68db      	ldr	r3, [r3, #12]
 810117e:	68fa      	ldr	r2, [r7, #12]
 8101180:	4313      	orrs	r3, r2
 8101182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8101184:	68fb      	ldr	r3, [r7, #12]
 8101186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810118a:	683b      	ldr	r3, [r7, #0]
 810118c:	695b      	ldr	r3, [r3, #20]
 810118e:	4313      	orrs	r3, r2
 8101190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8101192:	687b      	ldr	r3, [r7, #4]
 8101194:	68fa      	ldr	r2, [r7, #12]
 8101196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8101198:	683b      	ldr	r3, [r7, #0]
 810119a:	689a      	ldr	r2, [r3, #8]
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81011a0:	683b      	ldr	r3, [r7, #0]
 81011a2:	681a      	ldr	r2, [r3, #0]
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	4a10      	ldr	r2, [pc, #64]	; (81011ec <TIM_Base_SetConfig+0x114>)
 81011ac:	4293      	cmp	r3, r2
 81011ae:	d00f      	beq.n	81011d0 <TIM_Base_SetConfig+0xf8>
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	4a12      	ldr	r2, [pc, #72]	; (81011fc <TIM_Base_SetConfig+0x124>)
 81011b4:	4293      	cmp	r3, r2
 81011b6:	d00b      	beq.n	81011d0 <TIM_Base_SetConfig+0xf8>
 81011b8:	687b      	ldr	r3, [r7, #4]
 81011ba:	4a11      	ldr	r2, [pc, #68]	; (8101200 <TIM_Base_SetConfig+0x128>)
 81011bc:	4293      	cmp	r3, r2
 81011be:	d007      	beq.n	81011d0 <TIM_Base_SetConfig+0xf8>
 81011c0:	687b      	ldr	r3, [r7, #4]
 81011c2:	4a10      	ldr	r2, [pc, #64]	; (8101204 <TIM_Base_SetConfig+0x12c>)
 81011c4:	4293      	cmp	r3, r2
 81011c6:	d003      	beq.n	81011d0 <TIM_Base_SetConfig+0xf8>
 81011c8:	687b      	ldr	r3, [r7, #4]
 81011ca:	4a0f      	ldr	r2, [pc, #60]	; (8101208 <TIM_Base_SetConfig+0x130>)
 81011cc:	4293      	cmp	r3, r2
 81011ce:	d103      	bne.n	81011d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81011d0:	683b      	ldr	r3, [r7, #0]
 81011d2:	691a      	ldr	r2, [r3, #16]
 81011d4:	687b      	ldr	r3, [r7, #4]
 81011d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81011d8:	687b      	ldr	r3, [r7, #4]
 81011da:	2201      	movs	r2, #1
 81011dc:	615a      	str	r2, [r3, #20]
}
 81011de:	bf00      	nop
 81011e0:	3714      	adds	r7, #20
 81011e2:	46bd      	mov	sp, r7
 81011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011e8:	4770      	bx	lr
 81011ea:	bf00      	nop
 81011ec:	40010000 	.word	0x40010000
 81011f0:	40000400 	.word	0x40000400
 81011f4:	40000800 	.word	0x40000800
 81011f8:	40000c00 	.word	0x40000c00
 81011fc:	40010400 	.word	0x40010400
 8101200:	40014000 	.word	0x40014000
 8101204:	40014400 	.word	0x40014400
 8101208:	40014800 	.word	0x40014800

0810120c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810120c:	b480      	push	{r7}
 810120e:	b087      	sub	sp, #28
 8101210:	af00      	add	r7, sp, #0
 8101212:	60f8      	str	r0, [r7, #12]
 8101214:	60b9      	str	r1, [r7, #8]
 8101216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8101218:	68fb      	ldr	r3, [r7, #12]
 810121a:	6a1b      	ldr	r3, [r3, #32]
 810121c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810121e:	68fb      	ldr	r3, [r7, #12]
 8101220:	6a1b      	ldr	r3, [r3, #32]
 8101222:	f023 0201 	bic.w	r2, r3, #1
 8101226:	68fb      	ldr	r3, [r7, #12]
 8101228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810122a:	68fb      	ldr	r3, [r7, #12]
 810122c:	699b      	ldr	r3, [r3, #24]
 810122e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8101230:	693b      	ldr	r3, [r7, #16]
 8101232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8101236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8101238:	687b      	ldr	r3, [r7, #4]
 810123a:	011b      	lsls	r3, r3, #4
 810123c:	693a      	ldr	r2, [r7, #16]
 810123e:	4313      	orrs	r3, r2
 8101240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8101242:	697b      	ldr	r3, [r7, #20]
 8101244:	f023 030a 	bic.w	r3, r3, #10
 8101248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810124a:	697a      	ldr	r2, [r7, #20]
 810124c:	68bb      	ldr	r3, [r7, #8]
 810124e:	4313      	orrs	r3, r2
 8101250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8101252:	68fb      	ldr	r3, [r7, #12]
 8101254:	693a      	ldr	r2, [r7, #16]
 8101256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8101258:	68fb      	ldr	r3, [r7, #12]
 810125a:	697a      	ldr	r2, [r7, #20]
 810125c:	621a      	str	r2, [r3, #32]
}
 810125e:	bf00      	nop
 8101260:	371c      	adds	r7, #28
 8101262:	46bd      	mov	sp, r7
 8101264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101268:	4770      	bx	lr

0810126a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810126a:	b480      	push	{r7}
 810126c:	b087      	sub	sp, #28
 810126e:	af00      	add	r7, sp, #0
 8101270:	60f8      	str	r0, [r7, #12]
 8101272:	60b9      	str	r1, [r7, #8]
 8101274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8101276:	68fb      	ldr	r3, [r7, #12]
 8101278:	6a1b      	ldr	r3, [r3, #32]
 810127a:	f023 0210 	bic.w	r2, r3, #16
 810127e:	68fb      	ldr	r3, [r7, #12]
 8101280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8101282:	68fb      	ldr	r3, [r7, #12]
 8101284:	699b      	ldr	r3, [r3, #24]
 8101286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8101288:	68fb      	ldr	r3, [r7, #12]
 810128a:	6a1b      	ldr	r3, [r3, #32]
 810128c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810128e:	697b      	ldr	r3, [r7, #20]
 8101290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8101294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8101296:	687b      	ldr	r3, [r7, #4]
 8101298:	031b      	lsls	r3, r3, #12
 810129a:	697a      	ldr	r2, [r7, #20]
 810129c:	4313      	orrs	r3, r2
 810129e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81012a0:	693b      	ldr	r3, [r7, #16]
 81012a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81012a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 81012a8:	68bb      	ldr	r3, [r7, #8]
 81012aa:	011b      	lsls	r3, r3, #4
 81012ac:	693a      	ldr	r2, [r7, #16]
 81012ae:	4313      	orrs	r3, r2
 81012b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81012b2:	68fb      	ldr	r3, [r7, #12]
 81012b4:	697a      	ldr	r2, [r7, #20]
 81012b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81012b8:	68fb      	ldr	r3, [r7, #12]
 81012ba:	693a      	ldr	r2, [r7, #16]
 81012bc:	621a      	str	r2, [r3, #32]
}
 81012be:	bf00      	nop
 81012c0:	371c      	adds	r7, #28
 81012c2:	46bd      	mov	sp, r7
 81012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c8:	4770      	bx	lr

081012ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81012ca:	b480      	push	{r7}
 81012cc:	b085      	sub	sp, #20
 81012ce:	af00      	add	r7, sp, #0
 81012d0:	6078      	str	r0, [r7, #4]
 81012d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81012d4:	687b      	ldr	r3, [r7, #4]
 81012d6:	689b      	ldr	r3, [r3, #8]
 81012d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81012da:	68fb      	ldr	r3, [r7, #12]
 81012dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81012e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81012e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81012e6:	683a      	ldr	r2, [r7, #0]
 81012e8:	68fb      	ldr	r3, [r7, #12]
 81012ea:	4313      	orrs	r3, r2
 81012ec:	f043 0307 	orr.w	r3, r3, #7
 81012f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81012f2:	687b      	ldr	r3, [r7, #4]
 81012f4:	68fa      	ldr	r2, [r7, #12]
 81012f6:	609a      	str	r2, [r3, #8]
}
 81012f8:	bf00      	nop
 81012fa:	3714      	adds	r7, #20
 81012fc:	46bd      	mov	sp, r7
 81012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101302:	4770      	bx	lr

08101304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8101304:	b480      	push	{r7}
 8101306:	b087      	sub	sp, #28
 8101308:	af00      	add	r7, sp, #0
 810130a:	60f8      	str	r0, [r7, #12]
 810130c:	60b9      	str	r1, [r7, #8]
 810130e:	607a      	str	r2, [r7, #4]
 8101310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8101312:	68fb      	ldr	r3, [r7, #12]
 8101314:	689b      	ldr	r3, [r3, #8]
 8101316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8101318:	697b      	ldr	r3, [r7, #20]
 810131a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810131e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8101320:	683b      	ldr	r3, [r7, #0]
 8101322:	021a      	lsls	r2, r3, #8
 8101324:	687b      	ldr	r3, [r7, #4]
 8101326:	431a      	orrs	r2, r3
 8101328:	68bb      	ldr	r3, [r7, #8]
 810132a:	4313      	orrs	r3, r2
 810132c:	697a      	ldr	r2, [r7, #20]
 810132e:	4313      	orrs	r3, r2
 8101330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8101332:	68fb      	ldr	r3, [r7, #12]
 8101334:	697a      	ldr	r2, [r7, #20]
 8101336:	609a      	str	r2, [r3, #8]
}
 8101338:	bf00      	nop
 810133a:	371c      	adds	r7, #28
 810133c:	46bd      	mov	sp, r7
 810133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101342:	4770      	bx	lr

08101344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8101344:	b480      	push	{r7}
 8101346:	b085      	sub	sp, #20
 8101348:	af00      	add	r7, sp, #0
 810134a:	6078      	str	r0, [r7, #4]
 810134c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8101354:	2b01      	cmp	r3, #1
 8101356:	d101      	bne.n	810135c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8101358:	2302      	movs	r3, #2
 810135a:	e06d      	b.n	8101438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	2201      	movs	r2, #1
 8101360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101364:	687b      	ldr	r3, [r7, #4]
 8101366:	2202      	movs	r2, #2
 8101368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	681b      	ldr	r3, [r3, #0]
 8101370:	685b      	ldr	r3, [r3, #4]
 8101372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	681b      	ldr	r3, [r3, #0]
 8101378:	689b      	ldr	r3, [r3, #8]
 810137a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	681b      	ldr	r3, [r3, #0]
 8101380:	4a30      	ldr	r2, [pc, #192]	; (8101444 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8101382:	4293      	cmp	r3, r2
 8101384:	d004      	beq.n	8101390 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8101386:	687b      	ldr	r3, [r7, #4]
 8101388:	681b      	ldr	r3, [r3, #0]
 810138a:	4a2f      	ldr	r2, [pc, #188]	; (8101448 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810138c:	4293      	cmp	r3, r2
 810138e:	d108      	bne.n	81013a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8101390:	68fb      	ldr	r3, [r7, #12]
 8101392:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8101396:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8101398:	683b      	ldr	r3, [r7, #0]
 810139a:	685b      	ldr	r3, [r3, #4]
 810139c:	68fa      	ldr	r2, [r7, #12]
 810139e:	4313      	orrs	r3, r2
 81013a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81013a2:	68fb      	ldr	r3, [r7, #12]
 81013a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81013a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81013aa:	683b      	ldr	r3, [r7, #0]
 81013ac:	681b      	ldr	r3, [r3, #0]
 81013ae:	68fa      	ldr	r2, [r7, #12]
 81013b0:	4313      	orrs	r3, r2
 81013b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81013b4:	687b      	ldr	r3, [r7, #4]
 81013b6:	681b      	ldr	r3, [r3, #0]
 81013b8:	68fa      	ldr	r2, [r7, #12]
 81013ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	681b      	ldr	r3, [r3, #0]
 81013c0:	4a20      	ldr	r2, [pc, #128]	; (8101444 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81013c2:	4293      	cmp	r3, r2
 81013c4:	d022      	beq.n	810140c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	681b      	ldr	r3, [r3, #0]
 81013ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81013ce:	d01d      	beq.n	810140c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	681b      	ldr	r3, [r3, #0]
 81013d4:	4a1d      	ldr	r2, [pc, #116]	; (810144c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81013d6:	4293      	cmp	r3, r2
 81013d8:	d018      	beq.n	810140c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81013da:	687b      	ldr	r3, [r7, #4]
 81013dc:	681b      	ldr	r3, [r3, #0]
 81013de:	4a1c      	ldr	r2, [pc, #112]	; (8101450 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81013e0:	4293      	cmp	r3, r2
 81013e2:	d013      	beq.n	810140c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	681b      	ldr	r3, [r3, #0]
 81013e8:	4a1a      	ldr	r2, [pc, #104]	; (8101454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81013ea:	4293      	cmp	r3, r2
 81013ec:	d00e      	beq.n	810140c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	681b      	ldr	r3, [r3, #0]
 81013f2:	4a15      	ldr	r2, [pc, #84]	; (8101448 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81013f4:	4293      	cmp	r3, r2
 81013f6:	d009      	beq.n	810140c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	681b      	ldr	r3, [r3, #0]
 81013fc:	4a16      	ldr	r2, [pc, #88]	; (8101458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81013fe:	4293      	cmp	r3, r2
 8101400:	d004      	beq.n	810140c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101402:	687b      	ldr	r3, [r7, #4]
 8101404:	681b      	ldr	r3, [r3, #0]
 8101406:	4a15      	ldr	r2, [pc, #84]	; (810145c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8101408:	4293      	cmp	r3, r2
 810140a:	d10c      	bne.n	8101426 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810140c:	68bb      	ldr	r3, [r7, #8]
 810140e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8101412:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8101414:	683b      	ldr	r3, [r7, #0]
 8101416:	689b      	ldr	r3, [r3, #8]
 8101418:	68ba      	ldr	r2, [r7, #8]
 810141a:	4313      	orrs	r3, r2
 810141c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	681b      	ldr	r3, [r3, #0]
 8101422:	68ba      	ldr	r2, [r7, #8]
 8101424:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	2201      	movs	r2, #1
 810142a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810142e:	687b      	ldr	r3, [r7, #4]
 8101430:	2200      	movs	r2, #0
 8101432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8101436:	2300      	movs	r3, #0
}
 8101438:	4618      	mov	r0, r3
 810143a:	3714      	adds	r7, #20
 810143c:	46bd      	mov	sp, r7
 810143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101442:	4770      	bx	lr
 8101444:	40010000 	.word	0x40010000
 8101448:	40010400 	.word	0x40010400
 810144c:	40000400 	.word	0x40000400
 8101450:	40000800 	.word	0x40000800
 8101454:	40000c00 	.word	0x40000c00
 8101458:	40001800 	.word	0x40001800
 810145c:	40014000 	.word	0x40014000

08101460 <__libc_init_array>:
 8101460:	b570      	push	{r4, r5, r6, lr}
 8101462:	4d0d      	ldr	r5, [pc, #52]	; (8101498 <__libc_init_array+0x38>)
 8101464:	4c0d      	ldr	r4, [pc, #52]	; (810149c <__libc_init_array+0x3c>)
 8101466:	1b64      	subs	r4, r4, r5
 8101468:	10a4      	asrs	r4, r4, #2
 810146a:	2600      	movs	r6, #0
 810146c:	42a6      	cmp	r6, r4
 810146e:	d109      	bne.n	8101484 <__libc_init_array+0x24>
 8101470:	4d0b      	ldr	r5, [pc, #44]	; (81014a0 <__libc_init_array+0x40>)
 8101472:	4c0c      	ldr	r4, [pc, #48]	; (81014a4 <__libc_init_array+0x44>)
 8101474:	f000 f818 	bl	81014a8 <_init>
 8101478:	1b64      	subs	r4, r4, r5
 810147a:	10a4      	asrs	r4, r4, #2
 810147c:	2600      	movs	r6, #0
 810147e:	42a6      	cmp	r6, r4
 8101480:	d105      	bne.n	810148e <__libc_init_array+0x2e>
 8101482:	bd70      	pop	{r4, r5, r6, pc}
 8101484:	f855 3b04 	ldr.w	r3, [r5], #4
 8101488:	4798      	blx	r3
 810148a:	3601      	adds	r6, #1
 810148c:	e7ee      	b.n	810146c <__libc_init_array+0xc>
 810148e:	f855 3b04 	ldr.w	r3, [r5], #4
 8101492:	4798      	blx	r3
 8101494:	3601      	adds	r6, #1
 8101496:	e7f2      	b.n	810147e <__libc_init_array+0x1e>
 8101498:	081014d0 	.word	0x081014d0
 810149c:	081014d0 	.word	0x081014d0
 81014a0:	081014d0 	.word	0x081014d0
 81014a4:	081014d4 	.word	0x081014d4

081014a8 <_init>:
 81014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81014aa:	bf00      	nop
 81014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81014ae:	bc08      	pop	{r3}
 81014b0:	469e      	mov	lr, r3
 81014b2:	4770      	bx	lr

081014b4 <_fini>:
 81014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81014b6:	bf00      	nop
 81014b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81014ba:	bc08      	pop	{r3}
 81014bc:	469e      	mov	lr, r3
 81014be:	4770      	bx	lr
