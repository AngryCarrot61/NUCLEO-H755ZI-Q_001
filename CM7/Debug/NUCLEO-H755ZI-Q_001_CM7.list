
NUCLEO-H755ZI-Q_001_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cbc  08005cbc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cc4  08005cc4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc4  08005cc4  00015cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  24000010  08005cdc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2400015c  08005cdc  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155e7  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fe  00000000  00000000  00035668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00037e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d14  00000000  00000000  00038f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003be5a  00000000  00000000  00039c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001778d  00000000  00000000  00075a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018be1c  00000000  00000000  0008d22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004698  00000000  00000000  00219048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0021d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005c6c 	.word	0x08005c6c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005c6c 	.word	0x08005c6c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b62      	ldr	r3, [pc, #392]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	4a60      	ldr	r2, [pc, #384]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000726:	4b5e      	ldr	r3, [pc, #376]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000734:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	4a59      	ldr	r2, [pc, #356]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000744:	4b56      	ldr	r3, [pc, #344]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b53      	ldr	r3, [pc, #332]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	4a51      	ldr	r2, [pc, #324]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000762:	4b4f      	ldr	r3, [pc, #316]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000776:	4a4a      	ldr	r2, [pc, #296]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000780:	4b47      	ldr	r3, [pc, #284]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	4a42      	ldr	r2, [pc, #264]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079e:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	f003 0308 	and.w	r3, r3, #8
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ac:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	4a3b      	ldr	r2, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 80007b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f244 0101 	movw	r1, #16385	; 0x4001
 80007ee:	482d      	ldr	r0, [pc, #180]	; (80008a4 <MX_GPIO_Init+0x1a4>)
 80007f0:	f000 ff56 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fa:	482b      	ldr	r0, [pc, #172]	; (80008a8 <MX_GPIO_Init+0x1a8>)
 80007fc:	f000 ff50 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2102      	movs	r1, #2
 8000804:	4829      	ldr	r0, [pc, #164]	; (80008ac <MX_GPIO_Init+0x1ac>)
 8000806:	f000 ff4b 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4824      	ldr	r0, [pc, #144]	; (80008b0 <MX_GPIO_Init+0x1b0>)
 8000820:	f000 fd8e 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000824:	f244 0301 	movw	r3, #16385	; 0x4001
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4819      	ldr	r0, [pc, #100]	; (80008a4 <MX_GPIO_Init+0x1a4>)
 800083e:	f000 fd7f 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_GPIO_Init+0x1a8>)
 800085c:	f000 fd70 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000864:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <MX_GPIO_Init+0x1b4>)
 8000876:	f000 fd63 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_GPIO_Init+0x1ac>)
 8000892:	f000 fd55 	bl	8001340 <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3730      	adds	r7, #48	; 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	58024400 	.word	0x58024400
 80008a4:	58020400 	.word	0x58020400
 80008a8:	58020c00 	.word	0x58020c00
 80008ac:	58021000 	.word	0x58021000
 80008b0:	58020800 	.word	0x58020800
 80008b4:	58021800 	.word	0x58021800

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008be:	4b5e      	ldr	r3, [pc, #376]	; (8000a38 <main+0x180>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d11b      	bne.n	8000902 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ca:	f3bf 8f4f 	dsb	sy
}
 80008ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d0:	f3bf 8f6f 	isb	sy
}
 80008d4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008d6:	4b58      	ldr	r3, [pc, #352]	; (8000a38 <main+0x180>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008de:	f3bf 8f4f 	dsb	sy
}
 80008e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e4:	f3bf 8f6f 	isb	sy
}
 80008e8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008ea:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <main+0x180>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a52      	ldr	r2, [pc, #328]	; (8000a38 <main+0x180>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
}
 80008fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008fc:	f3bf 8f6f 	isb	sy
}
 8000900:	e000      	b.n	8000904 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000902:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000904:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <main+0x180>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d138      	bne.n	8000982 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000910:	4b49      	ldr	r3, [pc, #292]	; (8000a38 <main+0x180>)
 8000912:	2200      	movs	r2, #0
 8000914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000918:	f3bf 8f4f 	dsb	sy
}
 800091c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800091e:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <main+0x180>)
 8000920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000924:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	0b5b      	lsrs	r3, r3, #13
 800092a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800092e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	08db      	lsrs	r3, r3, #3
 8000934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000938:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	015a      	lsls	r2, r3, #5
 800093e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000942:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000948:	493b      	ldr	r1, [pc, #236]	; (8000a38 <main+0x180>)
 800094a:	4313      	orrs	r3, r2
 800094c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1ef      	bne.n	800093a <main+0x82>
    } while(sets-- != 0U);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1e5a      	subs	r2, r3, #1
 800095e:	60fa      	str	r2, [r7, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1e5      	bne.n	8000930 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000964:	f3bf 8f4f 	dsb	sy
}
 8000968:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800096a:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <main+0x180>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a32      	ldr	r2, [pc, #200]	; (8000a38 <main+0x180>)
 8000970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000974:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000976:	f3bf 8f4f 	dsb	sy
}
 800097a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097c:	f3bf 8f6f 	isb	sy
}
 8000980:	e000      	b.n	8000984 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000982:	bf00      	nop
  /* Enable D-Cache--------------------------------------------------------- */
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout */
  timeout = 0xFFFF;
 8000984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000988:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800098a:	bf00      	nop
 800098c:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <main+0x184>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d004      	beq.n	80009a2 <main+0xea>
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	1e5a      	subs	r2, r3, #1
 800099c:	617a      	str	r2, [r7, #20]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dcf4      	bgt.n	800098c <main+0xd4>
  if ( timeout < 0 )
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	da01      	bge.n	80009ac <main+0xf4>
  {
  Error_Handler();
 80009a8:	f000 f91e 	bl	8000be8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration-------------------------------------------------------- */

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 fb22 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 f848 	bl	8000a44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009b4:	f000 f8f8 	bl	8000ba8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/* HW semaphore Clock enable */
__HAL_RCC_HSEM_CLK_ENABLE();
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <main+0x184>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <main+0x184>)
 80009c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <main+0x184>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 fe96 	bl	8001708 <HAL_HSEM_FastTake>
/* Release HSEM in order to notify the CPU2(CM4) */
HAL_HSEM_Release(HSEM_ID_0,0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 feac 	bl	800173c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e8:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009ea:	bf00      	nop
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <main+0x184>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d104      	bne.n	8000a02 <main+0x14a>
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	1e5a      	subs	r2, r3, #1
 80009fc:	617a      	str	r2, [r7, #20]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	dcf4      	bgt.n	80009ec <main+0x134>
if ( timeout < 0 )
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	da01      	bge.n	8000a0c <main+0x154>
{
Error_Handler();
 8000a08:	f000 f8ee 	bl	8000be8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f7ff fe78 	bl	8000700 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 8000a10:	f000 fa10 	bl	8000e34 <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
//  MX_IWDG1_Init();
  MX_TIM1_Init();
 8000a14:	f000 f932 	bl	8000c7c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a18:	f000 f984 	bl	8000d24 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4808      	ldr	r0, [pc, #32]	; (8000a40 <main+0x188>)
 8000a20:	f000 fe57 	bl	80016d2 <HAL_GPIO_TogglePin>
//    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <main+0x188>)
 8000a2a:	f000 fe52 	bl	80016d2 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a32:	f000 fb71 	bl	8001118 <HAL_Delay>
    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a36:	e7f1      	b.n	8000a1c <main+0x164>
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58020400 	.word	0x58020400

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b09e      	sub	sp, #120	; 0x78
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4e:	224c      	movs	r2, #76	; 0x4c
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f005 f8de 	bl	8005c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f005 f8d7 	bl	8005c14 <memset>

  /** Supply configuration update enable
  */
//  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);             /* Wrong */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);	      /* Correct */
 8000a66:	2004      	movs	r0, #4
 8000a68:	f000 fe7c 	bl	8001764 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <SystemClock_Config+0x158>)
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <SystemClock_Config+0x158>)
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a7c:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <SystemClock_Config+0x158>)
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <SystemClock_Config+0x15c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a45      	ldr	r2, [pc, #276]	; (8000ba0 <SystemClock_Config+0x15c>)
 8000a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <SystemClock_Config+0x15c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9e:	bf00      	nop
 8000aa0:	4b3f      	ldr	r3, [pc, #252]	; (8000ba0 <SystemClock_Config+0x15c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aac:	d1f8      	bne.n	8000aa0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b3d      	ldr	r3, [pc, #244]	; (8000ba4 <SystemClock_Config+0x160>)
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab4:	4a3b      	ldr	r2, [pc, #236]	; (8000ba4 <SystemClock_Config+0x160>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <SystemClock_Config+0x160>)
 8000ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000acc:	2300      	movs	r3, #0
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <SystemClock_Config+0x15c>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <SystemClock_Config+0x15c>)
 8000ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <SystemClock_Config+0x15c>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <SystemClock_Config+0x158>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	4a2c      	ldr	r2, [pc, #176]	; (8000b9c <SystemClock_Config+0x158>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <SystemClock_Config+0x158>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000afe:	bf00      	nop
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <SystemClock_Config+0x15c>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b0c:	d1f8      	bne.n	8000b00 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000b0e:	2329      	movs	r3, #41	; 0x29
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b24:	2302      	movs	r3, #2
 8000b26:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b2c:	2378      	movs	r3, #120	; 0x78
 8000b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fe63 	bl	8001818 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000b58:	f000 f846 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	233f      	movs	r3, #63	; 0x3f
 8000b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2303      	movs	r3, #3
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b70:	2340      	movs	r3, #64	; 0x40
 8000b72:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2104      	movs	r1, #4
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 faa1 	bl	80020cc <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000b90:	f000 f82a 	bl	8000be8 <Error_Handler>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3778      	adds	r7, #120	; 0x78
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58000400 	.word	0x58000400
 8000ba0:	58024800 	.word	0x58024800
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0b0      	sub	sp, #192	; 0xc0
 8000bac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	22c0      	movs	r2, #192	; 0xc0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 f82d 	bl	8005c14 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	f04f 0300 	mov.w	r3, #0
 8000bc2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8000bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fe07 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000bdc:	f000 f804 	bl	8000be8 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	37c0      	adds	r7, #192	; 0xc0
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x30>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x30>)
 8000c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	58024400 	.word	0x58024400

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 fa30 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000c9c:	4a20      	ldr	r2, [pc, #128]	; (8000d20 <MX_TIM1_Init+0xa4>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cc6:	4815      	ldr	r0, [pc, #84]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000cc8:	f003 fbb8 	bl	800443c <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000cd2:	f7ff ff89 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000ce4:	f003 fc02 	bl	80044ec <HAL_TIM_ConfigClockSource>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cee:	f7ff ff7b 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_TIM1_Init+0xa0>)
 8000d04:	f003 fe22 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d0e:	f7ff ff6b 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2400002c 	.word	0x2400002c
 8000d20:	40010000 	.word	0x40010000

08000d24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <MX_TIM3_Init+0x98>)
 8000d46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d6a:	f003 fb67 	bl	800443c <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d74:	f7ff ff38 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d86:	f003 fbb1 	bl	80044ec <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d90:	f7ff ff2a 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000da2:	f003 fdd3 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000dac:	f7ff ff1c 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000078 	.word	0x24000078
 8000dbc:	40000400 	.word	0x40000400

08000dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <HAL_TIM_Base_MspInit+0x68>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10f      	bne.n	8000df2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_TIM_Base_MspInit+0x6c>)
 8000dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_TIM_Base_MspInit+0x6c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_TIM_Base_MspInit+0x6c>)
 8000de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000df0:	e013      	b.n	8000e1a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_TIM_Base_MspInit+0x70>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d10e      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_TIM_Base_MspInit+0x6c>)
 8000dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x6c>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_TIM_Base_MspInit+0x6c>)
 8000e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <MX_USART3_UART_Init+0x94>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e7e:	f003 fdf3 	bl	8004a68 <HAL_UART_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e88:	f7ff feae 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000e90:	f004 fdf5 	bl	8005a7e <HAL_UARTEx_SetTxFifoThreshold>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e9a:	f7ff fea5 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000ea2:	f004 fe2a 	bl	8005afa <HAL_UARTEx_SetRxFifoThreshold>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f7ff fe9c 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_USART3_UART_Init+0x90>)
 8000eb2:	f004 fdab 	bl	8005a0c <HAL_UARTEx_DisableFifoMode>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f7ff fe94 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	240000c4 	.word	0x240000c4
 8000ec8:	40004800 	.word	0x40004800

08000ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0ba      	sub	sp, #232	; 0xe8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	22c0      	movs	r2, #192	; 0xc0
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fe91 	bl	8005c14 <memset>
  if(uartHandle->Instance==USART3)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <HAL_UART_MspInit+0xc8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d146      	bne.n	8000f8a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000efc:	f04f 0202 	mov.w	r2, #2
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fc66 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f1e:	f7ff fe63 	bl	8000be8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_UART_MspInit+0xd0>)
 8000f86:	f000 f9db 	bl	8001340 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	37e8      	adds	r7, #232	; 0xe8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004800 	.word	0x40004800
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020c00 	.word	0x58020c00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa4:	f7ff fb16 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fce:	f004 fe29 	bl	8005c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fc71 	bl	80008b8 <main>
  bx  lr
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fe4:	08005ccc 	.word	0x08005ccc
  ldr r2, =_sbss
 8000fe8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fec:	2400015c 	.word	0x2400015c

08000ff0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC3_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 f96e 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001000:	f001 fa1a 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 8001004:	4602      	mov	r2, r0
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_Init+0x68>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	4913      	ldr	r1, [pc, #76]	; (8001060 <HAL_Init+0x6c>)
 8001012:	5ccb      	ldrb	r3, [r1, r3]
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <HAL_Init+0x68>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_Init+0x6c>)
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	fa22 f303 	lsr.w	r3, r2, r3
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_Init+0x70>)
 8001036:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_Init+0x74>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f814 	bl	800106c <HAL_InitTick>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e002      	b.n	8001054 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800104e:	f7ff fdd1 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	58024400 	.word	0x58024400
 8001060:	08005c84 	.word	0x08005c84
 8001064:	24000004 	.word	0x24000004
 8001068:	24000000 	.word	0x24000000

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_InitTick+0x60>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e021      	b.n	80010c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_InitTick+0x64>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_InitTick+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f945 	bl	8001326 <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f91d 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x68>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2400000c 	.word	0x2400000c
 80010d0:	24000000 	.word	0x24000000
 80010d4:	24000008 	.word	0x24000008

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2400000c 	.word	0x2400000c
 80010fc:	24000158 	.word	0x24000158

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	24000158 	.word	0x24000158

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2400000c 	.word	0x2400000c

08001160 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetREVID+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	0c1b      	lsrs	r3, r3, #16
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	5c001000 	.word	0x5c001000

08001178 <__NVIC_SetPriorityGrouping>:
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	05fa0000 	.word	0x05fa0000

080011c0 <__NVIC_GetPriorityGrouping>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff5e 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffb2 	bl	8001298 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800134e:	4b89      	ldr	r3, [pc, #548]	; (8001574 <HAL_GPIO_Init+0x234>)
 8001350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001352:	e194      	b.n	800167e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8186 	beq.w	8001678 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d005      	beq.n	8001384 <HAL_GPIO_Init+0x44>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d130      	bne.n	80013e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ba:	2201      	movs	r2, #1
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 0201 	and.w	r2, r3, #1
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d017      	beq.n	8001422 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d123      	bne.n	8001476 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	69b9      	ldr	r1, [r7, #24]
 8001472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0203 	and.w	r2, r3, #3
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80e0 	beq.w	8001678 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b8:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <HAL_GPIO_Init+0x238>)
 80014ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014be:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <HAL_GPIO_Init+0x238>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_GPIO_Init+0x238>)
 80014ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d6:	4a29      	ldr	r2, [pc, #164]	; (800157c <HAL_GPIO_Init+0x23c>)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_GPIO_Init+0x240>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d052      	beq.n	80015a8 <HAL_GPIO_Init+0x268>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <HAL_GPIO_Init+0x244>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d031      	beq.n	800156e <HAL_GPIO_Init+0x22e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <HAL_GPIO_Init+0x248>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d02b      	beq.n	800156a <HAL_GPIO_Init+0x22a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_GPIO_Init+0x24c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d025      	beq.n	8001566 <HAL_GPIO_Init+0x226>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <HAL_GPIO_Init+0x250>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01f      	beq.n	8001562 <HAL_GPIO_Init+0x222>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <HAL_GPIO_Init+0x254>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x21e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <HAL_GPIO_Init+0x258>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x21a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_GPIO_Init+0x25c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x216>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_GPIO_Init+0x260>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x212>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_GPIO_Init+0x264>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x20e>
 800154a:	2309      	movs	r3, #9
 800154c:	e02d      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 800154e:	230a      	movs	r3, #10
 8001550:	e02b      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 8001552:	2308      	movs	r3, #8
 8001554:	e029      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 8001556:	2307      	movs	r3, #7
 8001558:	e027      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 800155a:	2306      	movs	r3, #6
 800155c:	e025      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 800155e:	2305      	movs	r3, #5
 8001560:	e023      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 8001562:	2304      	movs	r3, #4
 8001564:	e021      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 8001566:	2303      	movs	r3, #3
 8001568:	e01f      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 800156a:	2302      	movs	r3, #2
 800156c:	e01d      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 800156e:	2301      	movs	r3, #1
 8001570:	e01b      	b.n	80015aa <HAL_GPIO_Init+0x26a>
 8001572:	bf00      	nop
 8001574:	58000080 	.word	0x58000080
 8001578:	58024400 	.word	0x58024400
 800157c:	58000400 	.word	0x58000400
 8001580:	58020000 	.word	0x58020000
 8001584:	58020400 	.word	0x58020400
 8001588:	58020800 	.word	0x58020800
 800158c:	58020c00 	.word	0x58020c00
 8001590:	58021000 	.word	0x58021000
 8001594:	58021400 	.word	0x58021400
 8001598:	58021800 	.word	0x58021800
 800159c:	58021c00 	.word	0x58021c00
 80015a0:	58022000 	.word	0x58022000
 80015a4:	58022400 	.word	0x58022400
 80015a8:	2300      	movs	r3, #0
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	f002 0203 	and.w	r2, r2, #3
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	4093      	lsls	r3, r2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ba:	4938      	ldr	r1, [pc, #224]	; (800169c <HAL_GPIO_Init+0x35c>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800161c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	3301      	adds	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	f47f ae63 	bne.w	8001354 <HAL_GPIO_Init+0x14>
  }
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	3724      	adds	r7, #36	; 0x24
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	58000400 	.word	0x58000400

080016a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016bc:	e003      	b.n	80016c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	041a      	lsls	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	619a      	str	r2, [r3, #24]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	041a      	lsls	r2, r3, #16
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	400b      	ands	r3, r1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001710:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_HSEM_FastTake+0x2c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3320      	adds	r3, #32
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_HSEM_FastTake+0x30>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	e000      	b.n	8001726 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	58026400 	.word	0x58026400
 8001738:	80000300 	.word	0x80000300

0800173c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001746:	4906      	ldr	r1, [pc, #24]	; (8001760 <HAL_HSEM_Release+0x24>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	58026400 	.word	0x58026400

08001764 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	2b06      	cmp	r3, #6
 8001776:	d00a      	beq.n	800178e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e040      	b.n	800180c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e03e      	b.n	800180c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001796:	491f      	ldr	r1, [pc, #124]	; (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4313      	orrs	r3, r2
 800179c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800179e:	f7ff fcaf 	bl	8001100 <HAL_GetTick>
 80017a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017a4:	e009      	b.n	80017ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017a6:	f7ff fcab 	bl	8001100 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b4:	d901      	bls.n	80017ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e028      	b.n	800180c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c6:	d1ee      	bne.n	80017a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b1e      	cmp	r3, #30
 80017cc:	d008      	beq.n	80017e0 <HAL_PWREx_ConfigSupply+0x7c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b2e      	cmp	r3, #46	; 0x2e
 80017d2:	d005      	beq.n	80017e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b1d      	cmp	r3, #29
 80017d8:	d002      	beq.n	80017e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b2d      	cmp	r3, #45	; 0x2d
 80017de:	d114      	bne.n	800180a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017e0:	f7ff fc8e 	bl	8001100 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017e6:	e009      	b.n	80017fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017e8:	f7ff fc8a 	bl	8001100 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f6:	d901      	bls.n	80017fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e007      	b.n	800180c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001808:	d1ee      	bne.n	80017e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58024800 	.word	0x58024800

08001818 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	f000 bc48 	b.w	80020bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8088 	beq.w	800194a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4b99      	ldr	r3, [pc, #612]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001844:	4b96      	ldr	r3, [pc, #600]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	2b10      	cmp	r3, #16
 800184e:	d007      	beq.n	8001860 <HAL_RCC_OscConfig+0x48>
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	2b18      	cmp	r3, #24
 8001854:	d111      	bne.n	800187a <HAL_RCC_OscConfig+0x62>
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b8f      	ldr	r3, [pc, #572]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d06d      	beq.n	8001948 <HAL_RCC_OscConfig+0x130>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d169      	bne.n	8001948 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	f000 bc21 	b.w	80020bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x7a>
 8001884:	4b86      	ldr	r3, [pc, #536]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a85      	ldr	r2, [pc, #532]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e02e      	b.n	80018f0 <HAL_RCC_OscConfig+0xd8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x9c>
 800189a:	4b81      	ldr	r3, [pc, #516]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a80      	ldr	r2, [pc, #512]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b7e      	ldr	r3, [pc, #504]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7d      	ldr	r2, [pc, #500]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0xd8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0xc0>
 80018be:	4b78      	ldr	r3, [pc, #480]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a77      	ldr	r2, [pc, #476]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b75      	ldr	r3, [pc, #468]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a74      	ldr	r2, [pc, #464]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0xd8>
 80018d8:	4b71      	ldr	r3, [pc, #452]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a70      	ldr	r2, [pc, #448]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b6e      	ldr	r3, [pc, #440]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6d      	ldr	r2, [pc, #436]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fc02 	bl	8001100 <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fbfe 	bl	8001100 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e3d4      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0xe8>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fbee 	bl	8001100 <HAL_GetTick>
 8001924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fbea 	bl	8001100 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e3c0      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800193a:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x110>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80ca 	beq.w	8001aec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001958:	4b51      	ldr	r3, [pc, #324]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001960:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <HAL_RCC_OscConfig+0x166>
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	2b18      	cmp	r3, #24
 8001972:	d156      	bne.n	8001a22 <HAL_RCC_OscConfig+0x20a>
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d151      	bne.n	8001a22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x17e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e392      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001996:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0219 	bic.w	r2, r3, #25
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	493f      	ldr	r1, [pc, #252]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fbaa 	bl	8001100 <HAL_GetTick>
 80019ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b0:	f7ff fba6 	bl	8001100 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e37c      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	f7ff fbc7 	bl	8001160 <HAL_GetREVID>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80019d8:	4293      	cmp	r3, r2
 80019da:	d817      	bhi.n	8001a0c <HAL_RCC_OscConfig+0x1f4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d108      	bne.n	80019f6 <HAL_RCC_OscConfig+0x1de>
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019ec:	4a2c      	ldr	r2, [pc, #176]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f4:	e07a      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	031b      	lsls	r3, r3, #12
 8001a04:	4926      	ldr	r1, [pc, #152]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0a:	e06f      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	4921      	ldr	r1, [pc, #132]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	e064      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d047      	beq.n	8001aba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0219 	bic.w	r2, r3, #25
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	491a      	ldr	r1, [pc, #104]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fb60 	bl	8001100 <HAL_GetTick>
 8001a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff fb5c 	bl	8001100 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e332      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	f7ff fb7d 	bl	8001160 <HAL_GetREVID>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d819      	bhi.n	8001aa4 <HAL_RCC_OscConfig+0x28c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b40      	cmp	r3, #64	; 0x40
 8001a76:	d108      	bne.n	8001a8a <HAL_RCC_OscConfig+0x272>
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a86:	6053      	str	r3, [r2, #4]
 8001a88:	e030      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	031b      	lsls	r3, r3, #12
 8001a98:	4901      	ldr	r1, [pc, #4]	; (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	e025      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	4b9a      	ldr	r3, [pc, #616]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	4997      	ldr	r1, [pc, #604]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e018      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b95      	ldr	r3, [pc, #596]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a94      	ldr	r2, [pc, #592]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fb1b 	bl	8001100 <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fb17 	bl	8001100 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e2ed      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ae0:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a9 	beq.w	8001c4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001afa:	4b85      	ldr	r3, [pc, #532]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b04:	4b82      	ldr	r3, [pc, #520]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d007      	beq.n	8001b20 <HAL_RCC_OscConfig+0x308>
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b18      	cmp	r3, #24
 8001b14:	d13a      	bne.n	8001b8c <HAL_RCC_OscConfig+0x374>
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d135      	bne.n	8001b8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b20:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x320>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b80      	cmp	r3, #128	; 0x80
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e2c1      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b38:	f7ff fb12 	bl	8001160 <HAL_GetREVID>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d817      	bhi.n	8001b76 <HAL_RCC_OscConfig+0x35e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d108      	bne.n	8001b60 <HAL_RCC_OscConfig+0x348>
 8001b4e:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b56:	4a6e      	ldr	r2, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b5c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b5e:	e075      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b60:	4b6b      	ldr	r3, [pc, #428]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	069b      	lsls	r3, r3, #26
 8001b6e:	4968      	ldr	r1, [pc, #416]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b74:	e06a      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b76:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	061b      	lsls	r3, r3, #24
 8001b84:	4962      	ldr	r1, [pc, #392]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b8a:	e05f      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d042      	beq.n	8001c1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b94:	4b5e      	ldr	r3, [pc, #376]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5d      	ldr	r2, [pc, #372]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff faae 	bl	8001100 <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ba8:	f7ff faaa 	bl	8001100 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e280      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bba:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bc6:	f7ff facb 	bl	8001160 <HAL_GetREVID>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d817      	bhi.n	8001c04 <HAL_RCC_OscConfig+0x3ec>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d108      	bne.n	8001bee <HAL_RCC_OscConfig+0x3d6>
 8001bdc:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001be4:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001be6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bea:	6053      	str	r3, [r2, #4]
 8001bec:	e02e      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
 8001bee:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	069b      	lsls	r3, r3, #26
 8001bfc:	4944      	ldr	r1, [pc, #272]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
 8001c02:	e023      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
 8001c04:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	493f      	ldr	r1, [pc, #252]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
 8001c18:	e018      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a3c      	ldr	r2, [pc, #240]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff fa6b 	bl	8001100 <HAL_GetTick>
 8001c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fa67 	bl	8001100 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e23d      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d036      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c64:	4a2a      	ldr	r2, [pc, #168]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fa48 	bl	8001100 <HAL_GetTick>
 8001c70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff fa44 	bl	8001100 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e21a      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x45c>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fa2e 	bl	8001100 <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fa2a 	bl	8001100 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e200      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d039      	beq.n	8001d46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fa0b 	bl	8001100 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cee:	f7ff fa07 	bl	8001100 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1dd      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x4d6>
 8001d0c:	e01b      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
 8001d0e:	bf00      	nop
 8001d10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d14:	4b9b      	ldr	r3, [pc, #620]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a9a      	ldr	r2, [pc, #616]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d20:	f7ff f9ee 	bl	8001100 <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d28:	f7ff f9ea 	bl	8001100 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1c0      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d3a:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8081 	beq.w	8001e56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d54:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <HAL_RCC_OscConfig+0x770>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a8b      	ldr	r2, [pc, #556]	; (8001f88 <HAL_RCC_OscConfig+0x770>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d60:	f7ff f9ce 	bl	8001100 <HAL_GetTick>
 8001d64:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d68:	f7ff f9ca 	bl	8001100 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1a0      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d7a:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <HAL_RCC_OscConfig+0x770>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x584>
 8001d8e:	4b7d      	ldr	r3, [pc, #500]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a7c      	ldr	r2, [pc, #496]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	e02d      	b.n	8001df8 <HAL_RCC_OscConfig+0x5e0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x5a6>
 8001da4:	4b77      	ldr	r3, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a76      	ldr	r2, [pc, #472]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	4b74      	ldr	r3, [pc, #464]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a73      	ldr	r2, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001db6:	f023 0304 	bic.w	r3, r3, #4
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x5e0>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c8>
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a6b      	ldr	r2, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0x5e0>
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a64      	ldr	r2, [pc, #400]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001df2:	f023 0304 	bic.w	r3, r3, #4
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d015      	beq.n	8001e2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f97e 	bl	8001100 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff f97a 	bl	8001100 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e14e      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0ee      	beq.n	8001e08 <HAL_RCC_OscConfig+0x5f0>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f968 	bl	8001100 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7ff f964 	bl	8001100 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e138      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e4a:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ee      	bne.n	8001e34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 812d 	beq.w	80020ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e68:	2b18      	cmp	r3, #24
 8001e6a:	f000 80bd 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	f040 809e 	bne.w	8001fb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a41      	ldr	r2, [pc, #260]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f93c 	bl	8001100 <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f938 	bl	8001100 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e10e      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e9e:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_RCC_OscConfig+0x774>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	4931      	ldr	r1, [pc, #196]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	3b01      	subs	r3, #1
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ef4:	4923      	ldr	r1, [pc, #140]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_RCC_OscConfig+0x778>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f12:	00d2      	lsls	r2, r2, #3
 8001f14:	491b      	ldr	r1, [pc, #108]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f023 020c 	bic.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4917      	ldr	r1, [pc, #92]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f023 0202 	bic.w	r2, r3, #2
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	4912      	ldr	r1, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f8c1 	bl	8001100 <HAL_GetTick>
 8001f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f80:	e011      	b.n	8001fa6 <HAL_RCC_OscConfig+0x78e>
 8001f82:	bf00      	nop
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58024800 	.word	0x58024800
 8001f8c:	fffffc0c 	.word	0xfffffc0c
 8001f90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff f8b4 	bl	8001100 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e08a      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x77c>
 8001fb2:	e082      	b.n	80020ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a42      	ldr	r2, [pc, #264]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f89e 	bl	8001100 <HAL_GetTick>
 8001fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff f89a 	bl	8001100 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e070      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x7b0>
 8001fe6:	e068      	b.n	80020ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d031      	beq.n	8002060 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d12a      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d122      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11a      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	0a5b      	lsrs	r3, r3, #9
 800202e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d111      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	0c1b      	lsrs	r3, r3, #16
 8002040:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0e1b      	lsrs	r3, r3, #24
 8002052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e02b      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8002066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002068:	08db      	lsrs	r3, r3, #3
 800206a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800206e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	429a      	cmp	r2, r3
 8002078:	d01f      	beq.n	80020ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002086:	f7ff f83b 	bl	8001100 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800208c:	bf00      	nop
 800208e:	f7ff f837 	bl	8001100 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	4293      	cmp	r3, r2
 8002098:	d0f9      	beq.n	800208e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 800209c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_OscConfig+0x8b0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020a6:	00d2      	lsls	r2, r2, #3
 80020a8:	4906      	ldr	r1, [pc, #24]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3730      	adds	r7, #48	; 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58024400 	.word	0x58024400
 80020c8:	ffff0007 	.word	0xffff0007

080020cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e19c      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b8a      	ldr	r3, [pc, #552]	; (800230c <HAL_RCC_ClockConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b87      	ldr	r3, [pc, #540]	; (800230c <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	4985      	ldr	r1, [pc, #532]	; (800230c <HAL_RCC_ClockConfig+0x240>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b83      	ldr	r3, [pc, #524]	; (800230c <HAL_RCC_ClockConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e184      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d010      	beq.n	800213e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	4b7b      	ldr	r3, [pc, #492]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002128:	429a      	cmp	r2, r3
 800212a:	d908      	bls.n	800213e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800212c:	4b78      	ldr	r3, [pc, #480]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4975      	ldr	r1, [pc, #468]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800213a:	4313      	orrs	r3, r2
 800213c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	4b70      	ldr	r3, [pc, #448]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002156:	429a      	cmp	r2, r3
 8002158:	d908      	bls.n	800216c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800215a:	4b6d      	ldr	r3, [pc, #436]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	496a      	ldr	r1, [pc, #424]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002168:	4313      	orrs	r3, r2
 800216a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	4b64      	ldr	r3, [pc, #400]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002184:	429a      	cmp	r2, r3
 8002186:	d908      	bls.n	800219a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002188:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	495e      	ldr	r1, [pc, #376]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002196:	4313      	orrs	r3, r2
 8002198:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d908      	bls.n	80021c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021b6:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4953      	ldr	r1, [pc, #332]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d908      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f023 020f 	bic.w	r2, r3, #15
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4947      	ldr	r1, [pc, #284]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d055      	beq.n	80022ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4940      	ldr	r1, [pc, #256]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002210:	4313      	orrs	r3, r2
 8002212:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d107      	bne.n	800222c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800221c:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d121      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0f6      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d115      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0ea      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0de      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d6      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f023 0207 	bic.w	r2, r3, #7
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4925      	ldr	r1, [pc, #148]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800227a:	4313      	orrs	r3, r2
 800227c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227e:	f7fe ff3f 	bl	8001100 <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002284:	e00a      	b.n	800229c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002286:	f7fe ff3b 	bl	8001100 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0be      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d1eb      	bne.n	8002286 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d208      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	490e      	ldr	r1, [pc, #56]	; (8002310 <HAL_RCC_ClockConfig+0x244>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d214      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_RCC_ClockConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 020f 	bic.w	r2, r3, #15
 80022f2:	4906      	ldr	r1, [pc, #24]	; (800230c <HAL_RCC_ClockConfig+0x240>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_RCC_ClockConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e086      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
 800230c:	52002000 	.word	0x52002000
 8002310:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800232c:	429a      	cmp	r2, r3
 800232e:	d208      	bcs.n	8002342 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002330:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4939      	ldr	r1, [pc, #228]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 800233e:	4313      	orrs	r3, r2
 8002340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800235a:	429a      	cmp	r2, r3
 800235c:	d208      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	492e      	ldr	r1, [pc, #184]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 800236c:	4313      	orrs	r3, r2
 800236e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002388:	429a      	cmp	r2, r3
 800238a:	d208      	bcs.n	800239e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4922      	ldr	r1, [pc, #136]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 800239a:	4313      	orrs	r3, r2
 800239c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d208      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4917      	ldr	r1, [pc, #92]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023cc:	f000 f834 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	4912      	ldr	r1, [pc, #72]	; (8002428 <HAL_RCC_ClockConfig+0x35c>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <HAL_RCC_ClockConfig+0x35c>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x360>)
 8002402:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_RCC_ClockConfig+0x364>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x368>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fe2c 	bl	800106c <HAL_InitTick>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	58024400 	.word	0x58024400
 8002428:	08005c84 	.word	0x08005c84
 800242c:	24000004 	.word	0x24000004
 8002430:	24000000 	.word	0x24000000
 8002434:	24000008 	.word	0x24000008

08002438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243e:	4bb3      	ldr	r3, [pc, #716]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002446:	2b18      	cmp	r3, #24
 8002448:	f200 8155 	bhi.w	80026f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800244c:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <HAL_RCC_GetSysClockFreq+0x1c>)
 800244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002452:	bf00      	nop
 8002454:	080024b9 	.word	0x080024b9
 8002458:	080026f7 	.word	0x080026f7
 800245c:	080026f7 	.word	0x080026f7
 8002460:	080026f7 	.word	0x080026f7
 8002464:	080026f7 	.word	0x080026f7
 8002468:	080026f7 	.word	0x080026f7
 800246c:	080026f7 	.word	0x080026f7
 8002470:	080026f7 	.word	0x080026f7
 8002474:	080024df 	.word	0x080024df
 8002478:	080026f7 	.word	0x080026f7
 800247c:	080026f7 	.word	0x080026f7
 8002480:	080026f7 	.word	0x080026f7
 8002484:	080026f7 	.word	0x080026f7
 8002488:	080026f7 	.word	0x080026f7
 800248c:	080026f7 	.word	0x080026f7
 8002490:	080026f7 	.word	0x080026f7
 8002494:	080024e5 	.word	0x080024e5
 8002498:	080026f7 	.word	0x080026f7
 800249c:	080026f7 	.word	0x080026f7
 80024a0:	080026f7 	.word	0x080026f7
 80024a4:	080026f7 	.word	0x080026f7
 80024a8:	080026f7 	.word	0x080026f7
 80024ac:	080026f7 	.word	0x080026f7
 80024b0:	080026f7 	.word	0x080026f7
 80024b4:	080024eb 	.word	0x080024eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024b8:	4b94      	ldr	r3, [pc, #592]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024c4:	4b91      	ldr	r3, [pc, #580]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	4a90      	ldr	r2, [pc, #576]	; (8002710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80024d6:	e111      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024d8:	4b8d      	ldr	r3, [pc, #564]	; (8002710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024da:	61bb      	str	r3, [r7, #24]
      break;
 80024dc:	e10e      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80024de:	4b8d      	ldr	r3, [pc, #564]	; (8002714 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024e0:	61bb      	str	r3, [r7, #24]
      break;
 80024e2:	e10b      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80024e4:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024e6:	61bb      	str	r3, [r7, #24]
      break;
 80024e8:	e108      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024ea:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80024f4:	4b85      	ldr	r3, [pc, #532]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002500:	4b82      	ldr	r3, [pc, #520]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800250a:	4b80      	ldr	r3, [pc, #512]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80e1 	beq.w	80026f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b02      	cmp	r3, #2
 8002532:	f000 8083 	beq.w	800263c <HAL_RCC_GetSysClockFreq+0x204>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b02      	cmp	r3, #2
 800253a:	f200 80a1 	bhi.w	8002680 <HAL_RCC_GetSysClockFreq+0x248>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x114>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d056      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800254a:	e099      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800254c:	4b6f      	ldr	r3, [pc, #444]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d02d      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002558:	4b6c      	ldr	r3, [pc, #432]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	4a6b      	ldr	r2, [pc, #428]	; (8002710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002582:	4b62      	ldr	r3, [pc, #392]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002592:	ed97 6a02 	vldr	s12, [r7, #8]
 8002596:	eddf 5a61 	vldr	s11, [pc, #388]	; 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 800259a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800259e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025b2:	e087      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002720 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025c6:	4b51      	ldr	r3, [pc, #324]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025f6:	e065      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002602:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002724 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800261a:	ed97 6a02 	vldr	s12, [r7, #8]
 800261e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800262a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800262e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800263a:	e043      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002646:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002728 <HAL_RCC_GetSysClockFreq+0x2f0>
 800264a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800265e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002662:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800266a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800266e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800267e:	e021      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	ee07 3a90 	vmov	s15, r3
 8002686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002724 <HAL_RCC_GetSysClockFreq+0x2ec>
 800268e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 80026aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	0a5b      	lsrs	r3, r3, #9
 80026ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ce:	3301      	adds	r3, #1
 80026d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80026e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e8:	ee17 3a90 	vmov	r3, s15
 80026ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80026ee:	e005      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
      break;
 80026f4:	e002      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026f8:	61bb      	str	r3, [r7, #24]
      break;
 80026fa:	bf00      	nop
  }

  return sysclockfreq;
 80026fc:	69bb      	ldr	r3, [r7, #24]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3724      	adds	r7, #36	; 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	58024400 	.word	0x58024400
 8002710:	03d09000 	.word	0x03d09000
 8002714:	003d0900 	.word	0x003d0900
 8002718:	007a1200 	.word	0x007a1200
 800271c:	46000000 	.word	0x46000000
 8002720:	4c742400 	.word	0x4c742400
 8002724:	4a742400 	.word	0x4a742400
 8002728:	4af42400 	.word	0x4af42400

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002732:	f7ff fe81 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCC_GetHCLKFreq+0x50>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490f      	ldr	r1, [pc, #60]	; (8002780 <HAL_RCC_GetHCLKFreq+0x54>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_GetHCLKFreq+0x50>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_GetHCLKFreq+0x54>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a07      	ldr	r2, [pc, #28]	; (8002784 <HAL_RCC_GetHCLKFreq+0x58>)
 8002768:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <HAL_RCC_GetHCLKFreq+0x5c>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_RCC_GetHCLKFreq+0x58>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	58024400 	.word	0x58024400
 8002780:	08005c84 	.word	0x08005c84
 8002784:	24000004 	.word	0x24000004
 8002788:	24000000 	.word	0x24000000

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002790:	f7ff ffcc 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	58024400 	.word	0x58024400
 80027b4:	08005c84 	.word	0x08005c84

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027bc:	f7ff ffb6 	bl	800272c <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	58024400 	.word	0x58024400
 80027e0:	08005c84 	.word	0x08005c84

080027e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e8:	b0ca      	sub	sp, #296	; 0x128
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002808:	2500      	movs	r5, #0
 800280a:	ea54 0305 	orrs.w	r3, r4, r5
 800280e:	d049      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800281a:	d02f      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800281c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002820:	d828      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002826:	d01a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800282c:	d822      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002836:	d007      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002838:	e01c      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800283a:	4bb8      	ldr	r3, [pc, #736]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	4ab7      	ldr	r2, [pc, #732]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002846:	e01a      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800284c:	3308      	adds	r3, #8
 800284e:	2102      	movs	r1, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f001 fc8f 	bl	8004174 <RCCEx_PLL2_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800285c:	e00f      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800285e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002862:	3328      	adds	r3, #40	; 0x28
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f001 fd36 	bl	80042d8 <RCCEx_PLL3_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002872:	e004      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800287c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002886:	4ba5      	ldr	r3, [pc, #660]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800288e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002894:	4aa1      	ldr	r2, [pc, #644]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002896:	430b      	orrs	r3, r1
 8002898:	6513      	str	r3, [r2, #80]	; 0x50
 800289a:	e003      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80028b0:	f04f 0900 	mov.w	r9, #0
 80028b4:	ea58 0309 	orrs.w	r3, r8, r9
 80028b8:	d047      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80028ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d82a      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80028c4:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	080028e1 	.word	0x080028e1
 80028d0:	080028ef 	.word	0x080028ef
 80028d4:	08002905 	.word	0x08002905
 80028d8:	08002923 	.word	0x08002923
 80028dc:	08002923 	.word	0x08002923
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e0:	4b8e      	ldr	r3, [pc, #568]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	4a8d      	ldr	r2, [pc, #564]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028ec:	e01a      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f2:	3308      	adds	r3, #8
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 fc3c 	bl	8004174 <RCCEx_PLL2_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002902:	e00f      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002908:	3328      	adds	r3, #40	; 0x28
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f001 fce3 	bl	80042d8 <RCCEx_PLL3_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002918:	e004      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800292c:	4b7b      	ldr	r3, [pc, #492]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	f023 0107 	bic.w	r1, r3, #7
 8002934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	4a78      	ldr	r2, [pc, #480]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800293c:	430b      	orrs	r3, r1
 800293e:	6513      	str	r3, [r2, #80]	; 0x50
 8002940:	e003      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800294a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002956:	f04f 0b00 	mov.w	fp, #0
 800295a:	ea5a 030b 	orrs.w	r3, sl, fp
 800295e:	d04c      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d030      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800296c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002970:	d829      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002972:	2bc0      	cmp	r3, #192	; 0xc0
 8002974:	d02d      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002976:	2bc0      	cmp	r3, #192	; 0xc0
 8002978:	d825      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d018      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d821      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d007      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800298a:	e01c      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298c:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4a62      	ldr	r2, [pc, #392]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002998:	e01c      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800299a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800299e:	3308      	adds	r3, #8
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 fbe6 	bl	8004174 <RCCEx_PLL2_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029ae:	e011      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b4:	3328      	adds	r3, #40	; 0x28
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 fc8d 	bl	80042d8 <RCCEx_PLL3_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029c4:	e006      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029cc:	e002      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80029d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80029e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6513      	str	r3, [r2, #80]	; 0x50
 80029f0:	e003      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002a06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002a10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002a14:	460b      	mov	r3, r1
 8002a16:	4313      	orrs	r3, r2
 8002a18:	d053      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a26:	d035      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a2c:	d82e      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a32:	d031      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a38:	d828      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a3e:	d01a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a44:	d822      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a4e:	d007      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002a50:	e01c      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a52:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	4a31      	ldr	r2, [pc, #196]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a5e:	e01c      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a64:	3308      	adds	r3, #8
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fb83 	bl	8004174 <RCCEx_PLL2_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a74:	e011      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a7a:	3328      	adds	r3, #40	; 0x28
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 fc2a 	bl	80042d8 <RCCEx_PLL3_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a8a:	e006      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a94:	bf00      	nop
 8002a96:	e000      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab8:	e003      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002abe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002ace:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ad8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002adc:	460b      	mov	r3, r1
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	d056      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aee:	d038      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af4:	d831      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002af6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002afa:	d034      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002afc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b00:	d82b      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b06:	d01d      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b0c:	d825      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b18:	e01f      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b1a:	bf00      	nop
 8002b1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b20:	4ba2      	ldr	r3, [pc, #648]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	4aa1      	ldr	r2, [pc, #644]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b32:	3308      	adds	r3, #8
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 fb1c 	bl	8004174 <RCCEx_PLL2_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b42:	e011      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b48:	3328      	adds	r3, #40	; 0x28
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 fbc3 	bl	80042d8 <RCCEx_PLL3_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b58:	e006      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b60:	e002      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b70:	4b8e      	ldr	r3, [pc, #568]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b80:	4a8a      	ldr	r2, [pc, #552]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6593      	str	r3, [r2, #88]	; 0x58
 8002b86:	e003      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ba6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002baa:	460b      	mov	r3, r1
 8002bac:	4313      	orrs	r3, r2
 8002bae:	d03a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	2b30      	cmp	r3, #48	; 0x30
 8002bb8:	d01f      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002bba:	2b30      	cmp	r3, #48	; 0x30
 8002bbc:	d819      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d00c      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d815      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d019      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d111      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bce:	4b77      	ldr	r3, [pc, #476]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	4a76      	ldr	r2, [pc, #472]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002bda:	e011      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002be0:	3308      	adds	r3, #8
 8002be2:	2102      	movs	r1, #2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 fac5 	bl	8004174 <RCCEx_PLL2_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002bf0:	e006      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bf8:	e002      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c08:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	4a65      	ldr	r2, [pc, #404]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c1c:	e003      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002c32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002c3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4313      	orrs	r3, r2
 8002c44:	d051      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c50:	d035      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c56:	d82e      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c5c:	d031      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002c5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c62:	d828      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c68:	d01a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6e:	d822      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	d007      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002c7a:	e01c      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7c:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	4a4a      	ldr	r2, [pc, #296]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c88:	e01c      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c8e:	3308      	adds	r3, #8
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fa6e 	bl	8004174 <RCCEx_PLL2_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c9e:	e011      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca4:	3328      	adds	r3, #40	; 0x28
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f001 fb15 	bl	80042d8 <RCCEx_PLL3_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cb4:	e006      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cbc:	e002      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ccc:	4b37      	ldr	r3, [pc, #220]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cda:	4a34      	ldr	r2, [pc, #208]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6513      	str	r3, [r2, #80]	; 0x50
 8002ce0:	e003      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002d00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002d04:	460b      	mov	r3, r1
 8002d06:	4313      	orrs	r3, r2
 8002d08:	d056      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d14:	d033      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1a:	d82c      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d20:	d02f      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d26:	d826      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d2c:	d02b      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d32:	d820      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d38:	d012      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3e:	d81a      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d022      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d115      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d4e:	3308      	adds	r3, #8
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fa0e 	bl	8004174 <RCCEx_PLL2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d5e:	e015      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d64:	3328      	adds	r3, #40	; 0x28
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 fab5 	bl	80042d8 <RCCEx_PLL3_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d74:	e00a      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d7c:	e006      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e004      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da2:	4a02      	ldr	r2, [pc, #8]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6513      	str	r3, [r2, #80]	; 0x50
 8002da8:	e006      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002daa:	bf00      	nop
 8002dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	d055      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ddc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de4:	d033      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dea:	d82c      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d02f      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d826      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dfc:	d02b      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002dfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e02:	d820      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e08:	d012      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0e:	d81a      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d022      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e18:	d115      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e1e:	3308      	adds	r3, #8
 8002e20:	2101      	movs	r1, #1
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 f9a6 	bl	8004174 <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e2e:	e015      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e34:	3328      	adds	r3, #40	; 0x28
 8002e36:	2101      	movs	r1, #1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 fa4d 	bl	80042d8 <RCCEx_PLL3_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e44:	e00a      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e4c:	e006      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e4e:	bf00      	nop
 8002e50:	e004      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e64:	4ba3      	ldr	r3, [pc, #652]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e74:	4a9f      	ldr	r2, [pc, #636]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e76:	430b      	orrs	r3, r1
 8002e78:	6593      	str	r3, [r2, #88]	; 0x58
 8002e7a:	e003      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	d037      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eae:	d00e      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb4:	d816      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d018      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	4a8b      	ldr	r2, [pc, #556]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ecc:	e00f      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 f94c 	bl	8004174 <RCCEx_PLL2_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ee2:	e004      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002eea:	e000      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a7b      	ldr	r2, [pc, #492]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f06:	430b      	orrs	r3, r1
 8002f08:	6513      	str	r3, [r2, #80]	; 0x50
 8002f0a:	e003      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4313      	orrs	r3, r2
 8002f32:	d039      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d81c      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f3e:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002f81 	.word	0x08002f81
 8002f48:	08002f55 	.word	0x08002f55
 8002f4c:	08002f63 	.word	0x08002f63
 8002f50:	08002f81 	.word	0x08002f81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f54:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	4a66      	ldr	r2, [pc, #408]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f60:	e00f      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f66:	3308      	adds	r3, #8
 8002f68:	2102      	movs	r1, #2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 f902 	bl	8004174 <RCCEx_PLL2_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f76:	e004      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f7e:	e000      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f8a:	4b5a      	ldr	r3, [pc, #360]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f023 0103 	bic.w	r1, r3, #3
 8002f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	4a56      	ldr	r2, [pc, #344]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f000 809f 	beq.w	8003108 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fca:	4b4b      	ldr	r3, [pc, #300]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a4a      	ldr	r2, [pc, #296]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd6:	f7fe f893 	bl	8001100 <HAL_GetTick>
 8002fda:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe0:	f7fe f88e 	bl	8001100 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	; 0x64
 8002fee:	d903      	bls.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ff6:	e005      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ed      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003008:	2b00      	cmp	r3, #0
 800300a:	d179      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800300e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003014:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003018:	4053      	eors	r3, r2
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	2b00      	cmp	r3, #0
 8003020:	d015      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003022:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a30      	ldr	r2, [pc, #192]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a2d      	ldr	r2, [pc, #180]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003046:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003048:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800304e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305a:	d118      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe f850 	bl	8001100 <HAL_GetTick>
 8003060:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003064:	e00d      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe f84b 	bl	8001100 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003070:	1ad2      	subs	r2, r2, r3
 8003072:	f241 3388 	movw	r3, #5000	; 0x1388
 8003076:	429a      	cmp	r2, r3
 8003078:	d903      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003080:	e005      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0eb      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800308e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003092:	2b00      	cmp	r3, #0
 8003094:	d129      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800309a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800309e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a6:	d10e      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030b8:	091a      	lsrs	r2, r3, #4
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80030bc:	4013      	ands	r3, r2
 80030be:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6113      	str	r3, [r2, #16]
 80030c4:	e005      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030d0:	6113      	str	r3, [r2, #16]
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80030d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	e00e      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80030f2:	e009      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80030f4:	58024400 	.word	0x58024400
 80030f8:	58024800 	.word	0x58024800
 80030fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f002 0301 	and.w	r3, r2, #1
 8003114:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800311e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003122:	460b      	mov	r3, r1
 8003124:	4313      	orrs	r3, r2
 8003126:	f000 8089 	beq.w	800323c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003130:	2b28      	cmp	r3, #40	; 0x28
 8003132:	d86b      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003215 	.word	0x08003215
 8003140:	0800320d 	.word	0x0800320d
 8003144:	0800320d 	.word	0x0800320d
 8003148:	0800320d 	.word	0x0800320d
 800314c:	0800320d 	.word	0x0800320d
 8003150:	0800320d 	.word	0x0800320d
 8003154:	0800320d 	.word	0x0800320d
 8003158:	0800320d 	.word	0x0800320d
 800315c:	080031e1 	.word	0x080031e1
 8003160:	0800320d 	.word	0x0800320d
 8003164:	0800320d 	.word	0x0800320d
 8003168:	0800320d 	.word	0x0800320d
 800316c:	0800320d 	.word	0x0800320d
 8003170:	0800320d 	.word	0x0800320d
 8003174:	0800320d 	.word	0x0800320d
 8003178:	0800320d 	.word	0x0800320d
 800317c:	080031f7 	.word	0x080031f7
 8003180:	0800320d 	.word	0x0800320d
 8003184:	0800320d 	.word	0x0800320d
 8003188:	0800320d 	.word	0x0800320d
 800318c:	0800320d 	.word	0x0800320d
 8003190:	0800320d 	.word	0x0800320d
 8003194:	0800320d 	.word	0x0800320d
 8003198:	0800320d 	.word	0x0800320d
 800319c:	08003215 	.word	0x08003215
 80031a0:	0800320d 	.word	0x0800320d
 80031a4:	0800320d 	.word	0x0800320d
 80031a8:	0800320d 	.word	0x0800320d
 80031ac:	0800320d 	.word	0x0800320d
 80031b0:	0800320d 	.word	0x0800320d
 80031b4:	0800320d 	.word	0x0800320d
 80031b8:	0800320d 	.word	0x0800320d
 80031bc:	08003215 	.word	0x08003215
 80031c0:	0800320d 	.word	0x0800320d
 80031c4:	0800320d 	.word	0x0800320d
 80031c8:	0800320d 	.word	0x0800320d
 80031cc:	0800320d 	.word	0x0800320d
 80031d0:	0800320d 	.word	0x0800320d
 80031d4:	0800320d 	.word	0x0800320d
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	08003215 	.word	0x08003215
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e4:	3308      	adds	r3, #8
 80031e6:	2101      	movs	r1, #1
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 ffc3 	bl	8004174 <RCCEx_PLL2_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80031f4:	e00f      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031fa:	3328      	adds	r3, #40	; 0x28
 80031fc:	2101      	movs	r1, #1
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 f86a 	bl	80042d8 <RCCEx_PLL3_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800320a:	e004      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003212:	e000      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800321e:	4bbf      	ldr	r3, [pc, #764]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800322c:	4abb      	ldr	r2, [pc, #748]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800322e:	430b      	orrs	r3, r1
 8003230:	6553      	str	r3, [r2, #84]	; 0x54
 8003232:	e003      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f002 0302 	and.w	r3, r2, #2
 8003248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003252:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003256:	460b      	mov	r3, r1
 8003258:	4313      	orrs	r3, r2
 800325a:	d041      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800325c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003262:	2b05      	cmp	r3, #5
 8003264:	d824      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	080032b9 	.word	0x080032b9
 8003270:	08003285 	.word	0x08003285
 8003274:	0800329b 	.word	0x0800329b
 8003278:	080032b9 	.word	0x080032b9
 800327c:	080032b9 	.word	0x080032b9
 8003280:	080032b9 	.word	0x080032b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003288:	3308      	adds	r3, #8
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f000 ff71 	bl	8004174 <RCCEx_PLL2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003298:	e00f      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800329e:	3328      	adds	r3, #40	; 0x28
 80032a0:	2101      	movs	r1, #1
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 f818 	bl	80042d8 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032ae:	e004      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80032b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032c2:	4b96      	ldr	r3, [pc, #600]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f023 0107 	bic.w	r1, r3, #7
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d0:	4a92      	ldr	r2, [pc, #584]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032d2:	430b      	orrs	r3, r1
 80032d4:	6553      	str	r3, [r2, #84]	; 0x54
 80032d6:	e003      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f002 0304 	and.w	r3, r2, #4
 80032ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d044      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003308:	2b05      	cmp	r3, #5
 800330a:	d825      	bhi.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003361 	.word	0x08003361
 8003318:	0800332d 	.word	0x0800332d
 800331c:	08003343 	.word	0x08003343
 8003320:	08003361 	.word	0x08003361
 8003324:	08003361 	.word	0x08003361
 8003328:	08003361 	.word	0x08003361
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003330:	3308      	adds	r3, #8
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f000 ff1d 	bl	8004174 <RCCEx_PLL2_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003340:	e00f      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003346:	3328      	adds	r3, #40	; 0x28
 8003348:	2101      	movs	r1, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f000 ffc4 	bl	80042d8 <RCCEx_PLL3_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003356:	e004      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800335e:	e000      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	f023 0107 	bic.w	r1, r3, #7
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337a:	4a68      	ldr	r2, [pc, #416]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800337c:	430b      	orrs	r3, r1
 800337e:	6593      	str	r3, [r2, #88]	; 0x58
 8003380:	e003      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003386:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003392:	f002 0320 	and.w	r3, r2, #32
 8003396:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033a4:	460b      	mov	r3, r1
 80033a6:	4313      	orrs	r3, r2
 80033a8:	d055      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b6:	d033      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80033b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033bc:	d82c      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c2:	d02f      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d826      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033ce:	d02b      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80033d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033d4:	d820      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033da:	d012      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80033dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e0:	d81a      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d022      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80033e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ea:	d115      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f0:	3308      	adds	r3, #8
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 febd 	bl	8004174 <RCCEx_PLL2_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003400:	e015      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003406:	3328      	adds	r3, #40	; 0x28
 8003408:	2102      	movs	r1, #2
 800340a:	4618      	mov	r0, r3
 800340c:	f000 ff64 	bl	80042d8 <RCCEx_PLL3_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003416:	e00a      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800341e:	e006      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003420:	bf00      	nop
 8003422:	e004      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003424:	bf00      	nop
 8003426:	e002      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800342c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003436:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003448:	430b      	orrs	r3, r1
 800344a:	6553      	str	r3, [r2, #84]	; 0x54
 800344c:	e003      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800346c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003470:	460b      	mov	r3, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	d058      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800347e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003482:	d033      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003484:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003488:	d82c      	bhi.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d02f      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d826      	bhi.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800349a:	d02b      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800349c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a0:	d820      	bhi.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a6:	d012      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80034a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ac:	d81a      	bhi.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d022      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d115      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034bc:	3308      	adds	r3, #8
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fe57 	bl	8004174 <RCCEx_PLL2_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034cc:	e015      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d2:	3328      	adds	r3, #40	; 0x28
 80034d4:	2102      	movs	r1, #2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fefe 	bl	80042d8 <RCCEx_PLL3_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80034e2:	e00a      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034ea:	e006      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034ec:	bf00      	nop
 80034ee:	e004      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034f0:	bf00      	nop
 80034f2:	e002      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80034f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003512:	4a02      	ldr	r2, [pc, #8]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003514:	430b      	orrs	r3, r1
 8003516:	6593      	str	r3, [r2, #88]	; 0x58
 8003518:	e006      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800351a:	bf00      	nop
 800351c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003524:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800353e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003542:	460b      	mov	r3, r1
 8003544:	4313      	orrs	r3, r2
 8003546:	d055      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003550:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003554:	d033      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003556:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800355a:	d82c      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800355c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003560:	d02f      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003566:	d826      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003568:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800356c:	d02b      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800356e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003572:	d820      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003578:	d012      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800357a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800357e:	d81a      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d022      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003588:	d115      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	3308      	adds	r3, #8
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fdee 	bl	8004174 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800359e:	e015      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a4:	3328      	adds	r3, #40	; 0x28
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fe95 	bl	80042d8 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035b4:	e00a      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035bc:	e006      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035be:	bf00      	nop
 80035c0:	e004      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80035ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035d4:	4ba1      	ldr	r3, [pc, #644]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035e4:	4a9d      	ldr	r2, [pc, #628]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6593      	str	r3, [r2, #88]	; 0x58
 80035ea:	e003      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f002 0308 	and.w	r3, r2, #8
 8003600:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800360a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d01e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003620:	d10c      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003626:	3328      	adds	r3, #40	; 0x28
 8003628:	2102      	movs	r1, #2
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fe54 	bl	80042d8 <RCCEx_PLL3_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800363c:	4b87      	ldr	r3, [pc, #540]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364c:	4a83      	ldr	r2, [pc, #524]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800364e:	430b      	orrs	r3, r1
 8003650:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f002 0310 	and.w	r3, r2, #16
 800365e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003668:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800366c:	460b      	mov	r3, r1
 800366e:	4313      	orrs	r3, r2
 8003670:	d01e      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800367a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367e:	d10c      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003684:	3328      	adds	r3, #40	; 0x28
 8003686:	2102      	movs	r1, #2
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fe25 	bl	80042d8 <RCCEx_PLL3_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800369a:	4b70      	ldr	r3, [pc, #448]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036aa:	4a6c      	ldr	r2, [pc, #432]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80036bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80036ca:	460b      	mov	r3, r1
 80036cc:	4313      	orrs	r3, r2
 80036ce:	d03e      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036dc:	d022      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80036de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036e2:	d81b      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d00b      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80036ee:	e015      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	3308      	adds	r3, #8
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fd3b 	bl	8004174 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003704:	e00f      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370a:	3328      	adds	r3, #40	; 0x28
 800370c:	2102      	movs	r1, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fde2 	bl	80042d8 <RCCEx_PLL3_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800371a:	e004      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800372e:	4b4b      	ldr	r3, [pc, #300]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800373e:	4a47      	ldr	r2, [pc, #284]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003740:	430b      	orrs	r3, r1
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800374a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800375a:	67bb      	str	r3, [r7, #120]	; 0x78
 800375c:	2300      	movs	r3, #0
 800375e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003760:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d03b      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003776:	d01f      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003778:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800377c:	d818      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800377e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003782:	d003      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003788:	d007      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800378a:	e011      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378c:	4b33      	ldr	r3, [pc, #204]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	4a32      	ldr	r2, [pc, #200]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003796:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003798:	e00f      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379e:	3328      	adds	r3, #40	; 0x28
 80037a0:	2101      	movs	r1, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fd98 	bl	80042d8 <RCCEx_PLL3_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80037ae:	e004      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037b6:	e000      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80037b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	4a22      	ldr	r2, [pc, #136]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6553      	str	r3, [r2, #84]	; 0x54
 80037d8:	e003      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80037ee:	673b      	str	r3, [r7, #112]	; 0x70
 80037f0:	2300      	movs	r3, #0
 80037f2:	677b      	str	r3, [r7, #116]	; 0x74
 80037f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d034      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d007      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800380e:	e011      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4a11      	ldr	r2, [pc, #68]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800381c:	e00e      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	3308      	adds	r3, #8
 8003824:	2102      	movs	r1, #2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fca4 	bl	8004174 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003832:	e003      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800383a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	4a02      	ldr	r2, [pc, #8]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003854:	430b      	orrs	r3, r1
 8003856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800385a:	bf00      	nop
 800385c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003874:	66bb      	str	r3, [r7, #104]	; 0x68
 8003876:	2300      	movs	r3, #0
 8003878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800387a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800387e:	460b      	mov	r3, r1
 8003880:	4313      	orrs	r3, r2
 8003882:	d00c      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003888:	3328      	adds	r3, #40	; 0x28
 800388a:	2102      	movs	r1, #2
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fd23 	bl	80042d8 <RCCEx_PLL3_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80038aa:	663b      	str	r3, [r7, #96]	; 0x60
 80038ac:	2300      	movs	r3, #0
 80038ae:	667b      	str	r3, [r7, #100]	; 0x64
 80038b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80038b4:	460b      	mov	r3, r1
 80038b6:	4313      	orrs	r3, r2
 80038b8:	d038      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c6:	d018      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80038c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038cc:	d811      	bhi.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80038ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d2:	d014      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d8:	d80b      	bhi.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d011      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80038de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e2:	d106      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4bc3      	ldr	r3, [pc, #780]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4ac2      	ldr	r2, [pc, #776]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80038f0:	e008      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038f8:	e004      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80038fa:	bf00      	nop
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800390c:	4bb9      	ldr	r3, [pc, #740]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391c:	4ab5      	ldr	r2, [pc, #724]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391e:	430b      	orrs	r3, r1
 8003920:	6553      	str	r3, [r2, #84]	; 0x54
 8003922:	e003      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003928:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800392c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003938:	65bb      	str	r3, [r7, #88]	; 0x58
 800393a:	2300      	movs	r3, #0
 800393c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800393e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003942:	460b      	mov	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003948:	4baa      	ldr	r3, [pc, #680]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003956:	4aa7      	ldr	r2, [pc, #668]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003958:	430b      	orrs	r3, r1
 800395a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003968:	653b      	str	r3, [r7, #80]	; 0x50
 800396a:	2300      	movs	r3, #0
 800396c:	657b      	str	r3, [r7, #84]	; 0x54
 800396e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003978:	4b9e      	ldr	r3, [pc, #632]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003988:	4a9a      	ldr	r2, [pc, #616]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800398a:	430b      	orrs	r3, r1
 800398c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800399a:	64bb      	str	r3, [r7, #72]	; 0x48
 800399c:	2300      	movs	r3, #0
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039aa:	4b92      	ldr	r3, [pc, #584]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b8:	4a8e      	ldr	r2, [pc, #568]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ba:	430b      	orrs	r3, r1
 80039bc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80039ca:	643b      	str	r3, [r7, #64]	; 0x40
 80039cc:	2300      	movs	r3, #0
 80039ce:	647b      	str	r3, [r7, #68]	; 0x44
 80039d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039da:	4b86      	ldr	r3, [pc, #536]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	4a85      	ldr	r2, [pc, #532]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039e4:	6113      	str	r3, [r2, #16]
 80039e6:	4b83      	ldr	r3, [pc, #524]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e8:	6919      	ldr	r1, [r3, #16]
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80039f2:	4a80      	ldr	r2, [pc, #512]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a06:	2300      	movs	r3, #0
 8003a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a14:	4b77      	ldr	r3, [pc, #476]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a18:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	4a74      	ldr	r2, [pc, #464]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	2300      	movs	r3, #0
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a44:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a54:	4a67      	ldr	r2, [pc, #412]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	2100      	movs	r1, #0
 8003a64:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003a70:	460b      	mov	r3, r1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	d011      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fb78 	bl	8004174 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	6239      	str	r1, [r7, #32]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	d011      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aba:	3308      	adds	r3, #8
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fb58 	bl	8004174 <RCCEx_PLL2_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	61b9      	str	r1, [r7, #24]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003af0:	460b      	mov	r3, r1
 8003af2:	4313      	orrs	r3, r2
 8003af4:	d011      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	3308      	adds	r3, #8
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fb38 	bl	8004174 <RCCEx_PLL2_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	2100      	movs	r1, #0
 8003b24:	6139      	str	r1, [r7, #16]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b30:	460b      	mov	r3, r1
 8003b32:	4313      	orrs	r3, r2
 8003b34:	d011      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3a:	3328      	adds	r3, #40	; 0x28
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fbca 	bl	80042d8 <RCCEx_PLL3_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	2100      	movs	r1, #0
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b70:	460b      	mov	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	d011      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7a:	3328      	adds	r3, #40	; 0x28
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fbaa 	bl	80042d8 <RCCEx_PLL3_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d011      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	3328      	adds	r3, #40	; 0x28
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fb8a 	bl	80042d8 <RCCEx_PLL3_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003bda:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf4:	58024400 	.word	0x58024400

08003bf8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003bfc:	f7fe fd96 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	08005c84 	.word	0x08005c84

08003c24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c2c:	4ba1      	ldr	r3, [pc, #644]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c36:	4b9f      	ldr	r3, [pc, #636]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	0b1b      	lsrs	r3, r3, #12
 8003c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c42:	4b9c      	ldr	r3, [pc, #624]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c4e:	4b99      	ldr	r3, [pc, #612]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	08db      	lsrs	r3, r3, #3
 8003c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8111 	beq.w	8003e94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	f000 8083 	beq.w	8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	f200 80a1 	bhi.w	8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d056      	beq.n	8003d3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c8e:	e099      	b.n	8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c90:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d02d      	beq.n	8003cf8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c9c:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	08db      	lsrs	r3, r3, #3
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	4a84      	ldr	r2, [pc, #528]	; (8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	ee07 3a90 	vmov	s15, r3
 8003cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc6:	4b7b      	ldr	r3, [pc, #492]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003cf6:	e087      	b.n	8003e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d3a:	e065      	b.n	8003e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4e:	4b59      	ldr	r3, [pc, #356]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d7e:	e043      	b.n	8003e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d92:	4b48      	ldr	r3, [pc, #288]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003da6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dc2:	e021      	b.n	8003e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dd6:	4b37      	ldr	r3, [pc, #220]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	0a5b      	lsrs	r3, r3, #9
 8003e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2e:	ee17 2a90 	vmov	r2, s15
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e36:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e40:	ee07 3a90 	vmov	s15, r3
 8003e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e5c:	ee17 2a90 	vmov	r2, s15
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	0e1b      	lsrs	r3, r3, #24
 8003e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8a:	ee17 2a90 	vmov	r2, s15
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e92:	e008      	b.n	8003ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]
}
 8003ea6:	bf00      	nop
 8003ea8:	3724      	adds	r7, #36	; 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	03d09000 	.word	0x03d09000
 8003ebc:	46000000 	.word	0x46000000
 8003ec0:	4c742400 	.word	0x4c742400
 8003ec4:	4a742400 	.word	0x4a742400
 8003ec8:	4af42400 	.word	0x4af42400

08003ecc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ed4:	4ba1      	ldr	r3, [pc, #644]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003ede:	4b9f      	ldr	r3, [pc, #636]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	0d1b      	lsrs	r3, r3, #20
 8003ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ee8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003eea:	4b9c      	ldr	r3, [pc, #624]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003ef6:	4b99      	ldr	r3, [pc, #612]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	08db      	lsrs	r3, r3, #3
 8003efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8111 	beq.w	800413c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	f000 8083 	beq.w	8004028 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	f200 80a1 	bhi.w	800406c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d056      	beq.n	8003fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f36:	e099      	b.n	800406c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f38:	4b88      	ldr	r3, [pc, #544]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02d      	beq.n	8003fa0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f44:	4b85      	ldr	r3, [pc, #532]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	08db      	lsrs	r3, r3, #3
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	4a84      	ldr	r2, [pc, #528]	; (8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6e:	4b7b      	ldr	r3, [pc, #492]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f9e:	e087      	b.n	80040b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003faa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb2:	4b6a      	ldr	r3, [pc, #424]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fe2:	e065      	b.n	80040b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800416c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff6:	4b59      	ldr	r3, [pc, #356]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004006:	ed97 6a03 	vldr	s12, [r7, #12]
 800400a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800400e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800401a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004026:	e043      	b.n	80040b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403a:	4b48      	ldr	r3, [pc, #288]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404a:	ed97 6a03 	vldr	s12, [r7, #12]
 800404e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800406a:	e021      	b.n	80040b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800416c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800407a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407e:	4b37      	ldr	r3, [pc, #220]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004092:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80040b0:	4b2a      	ldr	r3, [pc, #168]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	0a5b      	lsrs	r3, r3, #9
 80040b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d6:	ee17 2a90 	vmov	r2, s15
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80040de:	4b1f      	ldr	r3, [pc, #124]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004104:	ee17 2a90 	vmov	r2, s15
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	0e1b      	lsrs	r3, r3, #24
 8004112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004126:	edd7 6a07 	vldr	s13, [r7, #28]
 800412a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800412e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004132:	ee17 2a90 	vmov	r2, s15
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800413a:	e008      	b.n	800414e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
}
 800414e:	bf00      	nop
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	58024400 	.word	0x58024400
 8004160:	03d09000 	.word	0x03d09000
 8004164:	46000000 	.word	0x46000000
 8004168:	4c742400 	.word	0x4c742400
 800416c:	4a742400 	.word	0x4a742400
 8004170:	4af42400 	.word	0x4af42400

08004174 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004182:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b03      	cmp	r3, #3
 800418c:	d101      	bne.n	8004192 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e099      	b.n	80042c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004192:	4b4f      	ldr	r3, [pc, #316]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4e      	ldr	r2, [pc, #312]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004198:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800419c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419e:	f7fc ffaf 	bl	8001100 <HAL_GetTick>
 80041a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041a4:	e008      	b.n	80041b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041a6:	f7fc ffab 	bl	8001100 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e086      	b.n	80042c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041b8:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	031b      	lsls	r3, r3, #12
 80041d2:	493f      	ldr	r1, [pc, #252]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	628b      	str	r3, [r1, #40]	; 0x28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	025b      	lsls	r3, r3, #9
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	3b01      	subs	r3, #1
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004208:	4931      	ldr	r1, [pc, #196]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800420e:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	492d      	ldr	r1, [pc, #180]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	f023 0220 	bic.w	r2, r3, #32
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4928      	ldr	r1, [pc, #160]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004232:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004238:	f023 0310 	bic.w	r3, r3, #16
 800423c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <RCCEx_PLL2_Config+0x160>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	69d2      	ldr	r2, [r2, #28]
 800424a:	00d2      	lsls	r2, r2, #3
 800424c:	4920      	ldr	r1, [pc, #128]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004252:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004258:	f043 0310 	orr.w	r3, r3, #16
 800425c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 800426a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004270:	e00f      	b.n	8004292 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 800427e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004284:	e005      	b.n	8004292 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 800428c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 8004298:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429e:	f7fc ff2f 	bl	8001100 <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042a6:	f7fc ff2b 	bl	8001100 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e006      	b.n	80042c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <RCCEx_PLL2_Config+0x15c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400
 80042d4:	ffff0007 	.word	0xffff0007

080042d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042e6:	4b53      	ldr	r3, [pc, #332]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d101      	bne.n	80042f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e099      	b.n	800442a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042f6:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a4e      	ldr	r2, [pc, #312]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004302:	f7fc fefd 	bl	8001100 <HAL_GetTick>
 8004306:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004308:	e008      	b.n	800431c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800430a:	f7fc fef9 	bl	8001100 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e086      	b.n	800442a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800431c:	4b45      	ldr	r3, [pc, #276]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004328:	4b42      	ldr	r3, [pc, #264]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	051b      	lsls	r3, r3, #20
 8004336:	493f      	ldr	r1, [pc, #252]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	628b      	str	r3, [r1, #40]	; 0x28
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	3b01      	subs	r3, #1
 8004342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	3b01      	subs	r3, #1
 800434c:	025b      	lsls	r3, r3, #9
 800434e:	b29b      	uxth	r3, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	3b01      	subs	r3, #1
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800436c:	4931      	ldr	r1, [pc, #196]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004372:	4b30      	ldr	r3, [pc, #192]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	492d      	ldr	r1, [pc, #180]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004384:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	4928      	ldr	r1, [pc, #160]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004396:	4b27      	ldr	r3, [pc, #156]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	4a26      	ldr	r2, [pc, #152]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 800439c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043a2:	4b24      	ldr	r3, [pc, #144]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a6:	4b24      	ldr	r3, [pc, #144]	; (8004438 <RCCEx_PLL3_Config+0x160>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	69d2      	ldr	r2, [r2, #28]
 80043ae:	00d2      	lsls	r2, r2, #3
 80043b0:	4920      	ldr	r1, [pc, #128]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043b6:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	4a19      	ldr	r2, [pc, #100]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043d4:	e00f      	b.n	80043f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d106      	bne.n	80043ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043dc:	4b15      	ldr	r3, [pc, #84]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	4a14      	ldr	r2, [pc, #80]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043e8:	e005      	b.n	80043f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	4a11      	ldr	r2, [pc, #68]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 80043fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004402:	f7fc fe7d 	bl	8001100 <HAL_GetTick>
 8004406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004408:	e008      	b.n	800441c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800440a:	f7fc fe79 	bl	8001100 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e006      	b.n	800442a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <RCCEx_PLL3_Config+0x15c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400
 8004438:	ffff0007 	.word	0xffff0007

0800443c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e049      	b.n	80044e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc fcac 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f000 f92e 	bl	80046dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIM_ConfigClockSource+0x1c>
 8004504:	2302      	movs	r3, #2
 8004506:	e0dc      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x1d6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	4b6a      	ldr	r3, [pc, #424]	; (80046cc <HAL_TIM_ConfigClockSource+0x1e0>)
 8004524:	4013      	ands	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800452e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a64      	ldr	r2, [pc, #400]	; (80046d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	f000 80a9 	beq.w	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 8004544:	4a62      	ldr	r2, [pc, #392]	; (80046d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	f200 80ae 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800454c:	4a61      	ldr	r2, [pc, #388]	; (80046d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	f000 80a1 	beq.w	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 8004554:	4a5f      	ldr	r2, [pc, #380]	; (80046d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	f200 80a6 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800455c:	4a5e      	ldr	r2, [pc, #376]	; (80046d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800455e:	4293      	cmp	r3, r2
 8004560:	f000 8099 	beq.w	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 8004564:	4a5c      	ldr	r2, [pc, #368]	; (80046d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004566:	4293      	cmp	r3, r2
 8004568:	f200 809e 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800456c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004570:	f000 8091 	beq.w	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 8004574:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004578:	f200 8096 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800457c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004580:	f000 8089 	beq.w	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 8004584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004588:	f200 808e 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004590:	d03e      	beq.n	8004610 <HAL_TIM_ConfigClockSource+0x124>
 8004592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004596:	f200 8087 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	f000 8086 	beq.w	80046ae <HAL_TIM_ConfigClockSource+0x1c2>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d87f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d01a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xf6>
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d87b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d050      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x16a>
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d877      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d03c      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x14a>
 80045bc:	2b50      	cmp	r3, #80	; 0x50
 80045be:	d873      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d058      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x18a>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d86f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d064      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d86b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d060      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d867      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05c      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d05a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x1aa>
 80045e0:	e062      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f2:	f000 f98b 	bl	800490c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	609a      	str	r2, [r3, #8]
      break;
 800460e:	e04f      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004620:	f000 f974 	bl	800490c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004632:	609a      	str	r2, [r3, #8]
      break;
 8004634:	e03c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 f8e4 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2150      	movs	r1, #80	; 0x50
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f93e 	bl	80048d0 <TIM_ITRx_SetConfig>
      break;
 8004654:	e02c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004662:	461a      	mov	r2, r3
 8004664:	f000 f903 	bl	800486e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2160      	movs	r1, #96	; 0x60
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f92e 	bl	80048d0 <TIM_ITRx_SetConfig>
      break;
 8004674:	e01c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	461a      	mov	r2, r3
 8004684:	f000 f8c4 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2140      	movs	r1, #64	; 0x40
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f91e 	bl	80048d0 <TIM_ITRx_SetConfig>
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 f915 	bl	80048d0 <TIM_ITRx_SetConfig>
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80046ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	ffceff88 	.word	0xffceff88
 80046d0:	00100040 	.word	0x00100040
 80046d4:	00100030 	.word	0x00100030
 80046d8:	00100020 	.word	0x00100020

080046dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a40      	ldr	r2, [pc, #256]	; (80047f0 <TIM_Base_SetConfig+0x114>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fa:	d00f      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a3d      	ldr	r2, [pc, #244]	; (80047f4 <TIM_Base_SetConfig+0x118>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00b      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3c      	ldr	r2, [pc, #240]	; (80047f8 <TIM_Base_SetConfig+0x11c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <TIM_Base_SetConfig+0x120>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <TIM_Base_SetConfig+0x124>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <TIM_Base_SetConfig+0x114>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01f      	beq.n	8004776 <TIM_Base_SetConfig+0x9a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473c:	d01b      	beq.n	8004776 <TIM_Base_SetConfig+0x9a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <TIM_Base_SetConfig+0x118>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d017      	beq.n	8004776 <TIM_Base_SetConfig+0x9a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <TIM_Base_SetConfig+0x11c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <TIM_Base_SetConfig+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <TIM_Base_SetConfig+0x120>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_Base_SetConfig+0x9a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a29      	ldr	r2, [pc, #164]	; (8004800 <TIM_Base_SetConfig+0x124>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_Base_SetConfig+0x9a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a28      	ldr	r2, [pc, #160]	; (8004804 <TIM_Base_SetConfig+0x128>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_Base_SetConfig+0x9a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a27      	ldr	r2, [pc, #156]	; (8004808 <TIM_Base_SetConfig+0x12c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_Base_SetConfig+0x9a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a26      	ldr	r2, [pc, #152]	; (800480c <TIM_Base_SetConfig+0x130>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a10      	ldr	r2, [pc, #64]	; (80047f0 <TIM_Base_SetConfig+0x114>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00f      	beq.n	80047d4 <TIM_Base_SetConfig+0xf8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <TIM_Base_SetConfig+0x124>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <TIM_Base_SetConfig+0xf8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a11      	ldr	r2, [pc, #68]	; (8004804 <TIM_Base_SetConfig+0x128>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0xf8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a10      	ldr	r2, [pc, #64]	; (8004808 <TIM_Base_SetConfig+0x12c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0xf8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0f      	ldr	r2, [pc, #60]	; (800480c <TIM_Base_SetConfig+0x130>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	615a      	str	r2, [r3, #20]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40010400 	.word	0x40010400
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800

08004810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f023 0201 	bic.w	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 030a 	bic.w	r3, r3, #10
 800484c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486e:	b480      	push	{r7}
 8004870:	b087      	sub	sp, #28
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f023 0210 	bic.w	r2, r3, #16
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	031b      	lsls	r3, r3, #12
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <TIM_ITRx_SetConfig+0x38>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f043 0307 	orr.w	r3, r3, #7
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	609a      	str	r2, [r3, #8]
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	ffcfff8f 	.word	0xffcfff8f

0800490c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	431a      	orrs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004960:	2302      	movs	r3, #2
 8004962:	e06d      	b.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2f      	ldr	r2, [pc, #188]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d108      	bne.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800499e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d022      	beq.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d01d      	beq.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d10c      	bne.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	40000c00 	.word	0x40000c00
 8004a60:	40001800 	.word	0x40001800
 8004a64:	40014000 	.word	0x40014000

08004a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e042      	b.n	8004b00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fc fa1d 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2224      	movs	r2, #36	; 0x24
 8004a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f82c 	bl	8004b08 <UART_SetConfig>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e022      	b.n	8004b00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fd88 	bl	80055d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fe0f 	bl	800571c <UART_CheckIdleState>
 8004afe:	4603      	mov	r3, r0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b0c:	b092      	sub	sp, #72	; 0x48
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4bbe      	ldr	r3, [pc, #760]	; (8004e30 <UART_SetConfig+0x328>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4ab3      	ldr	r2, [pc, #716]	; (8004e34 <UART_SetConfig+0x32c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b70:	4313      	orrs	r3, r2
 8004b72:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	4baf      	ldr	r3, [pc, #700]	; (8004e38 <UART_SetConfig+0x330>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	f023 010f 	bic.w	r1, r3, #15
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4aa6      	ldr	r2, [pc, #664]	; (8004e3c <UART_SetConfig+0x334>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d177      	bne.n	8004c98 <UART_SetConfig+0x190>
 8004ba8:	4ba5      	ldr	r3, [pc, #660]	; (8004e40 <UART_SetConfig+0x338>)
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb0:	2b28      	cmp	r3, #40	; 0x28
 8004bb2:	d86d      	bhi.n	8004c90 <UART_SetConfig+0x188>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0xb4>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004c61 	.word	0x08004c61
 8004bc0:	08004c91 	.word	0x08004c91
 8004bc4:	08004c91 	.word	0x08004c91
 8004bc8:	08004c91 	.word	0x08004c91
 8004bcc:	08004c91 	.word	0x08004c91
 8004bd0:	08004c91 	.word	0x08004c91
 8004bd4:	08004c91 	.word	0x08004c91
 8004bd8:	08004c91 	.word	0x08004c91
 8004bdc:	08004c69 	.word	0x08004c69
 8004be0:	08004c91 	.word	0x08004c91
 8004be4:	08004c91 	.word	0x08004c91
 8004be8:	08004c91 	.word	0x08004c91
 8004bec:	08004c91 	.word	0x08004c91
 8004bf0:	08004c91 	.word	0x08004c91
 8004bf4:	08004c91 	.word	0x08004c91
 8004bf8:	08004c91 	.word	0x08004c91
 8004bfc:	08004c71 	.word	0x08004c71
 8004c00:	08004c91 	.word	0x08004c91
 8004c04:	08004c91 	.word	0x08004c91
 8004c08:	08004c91 	.word	0x08004c91
 8004c0c:	08004c91 	.word	0x08004c91
 8004c10:	08004c91 	.word	0x08004c91
 8004c14:	08004c91 	.word	0x08004c91
 8004c18:	08004c91 	.word	0x08004c91
 8004c1c:	08004c79 	.word	0x08004c79
 8004c20:	08004c91 	.word	0x08004c91
 8004c24:	08004c91 	.word	0x08004c91
 8004c28:	08004c91 	.word	0x08004c91
 8004c2c:	08004c91 	.word	0x08004c91
 8004c30:	08004c91 	.word	0x08004c91
 8004c34:	08004c91 	.word	0x08004c91
 8004c38:	08004c91 	.word	0x08004c91
 8004c3c:	08004c81 	.word	0x08004c81
 8004c40:	08004c91 	.word	0x08004c91
 8004c44:	08004c91 	.word	0x08004c91
 8004c48:	08004c91 	.word	0x08004c91
 8004c4c:	08004c91 	.word	0x08004c91
 8004c50:	08004c91 	.word	0x08004c91
 8004c54:	08004c91 	.word	0x08004c91
 8004c58:	08004c91 	.word	0x08004c91
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c66:	e222      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6e:	e21e      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c76:	e21a      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7e:	e216      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004c80:	2320      	movs	r3, #32
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c86:	e212      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8e:	e20e      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c96:	e20a      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a69      	ldr	r2, [pc, #420]	; (8004e44 <UART_SetConfig+0x33c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d130      	bne.n	8004d04 <UART_SetConfig+0x1fc>
 8004ca2:	4b67      	ldr	r3, [pc, #412]	; (8004e40 <UART_SetConfig+0x338>)
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d826      	bhi.n	8004cfc <UART_SetConfig+0x1f4>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x1ac>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004ccd 	.word	0x08004ccd
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	08004cdd 	.word	0x08004cdd
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd2:	e1ec      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e1e8      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e1e4      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e1e0      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004cec:	2320      	movs	r3, #32
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e1dc      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004cf4:	2340      	movs	r3, #64	; 0x40
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfa:	e1d8      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004cfc:	2380      	movs	r3, #128	; 0x80
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d02:	e1d4      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a4f      	ldr	r2, [pc, #316]	; (8004e48 <UART_SetConfig+0x340>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d130      	bne.n	8004d70 <UART_SetConfig+0x268>
 8004d0e:	4b4c      	ldr	r3, [pc, #304]	; (8004e40 <UART_SetConfig+0x338>)
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b05      	cmp	r3, #5
 8004d18:	d826      	bhi.n	8004d68 <UART_SetConfig+0x260>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x218>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d39 	.word	0x08004d39
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	08004d49 	.word	0x08004d49
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3e:	e1b6      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d46:	e1b2      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e1ae      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e1aa      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004d58:	2320      	movs	r3, #32
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e1a6      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004d60:	2340      	movs	r3, #64	; 0x40
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e1a2      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6e:	e19e      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a35      	ldr	r2, [pc, #212]	; (8004e4c <UART_SetConfig+0x344>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d130      	bne.n	8004ddc <UART_SetConfig+0x2d4>
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <UART_SetConfig+0x338>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	2b05      	cmp	r3, #5
 8004d84:	d826      	bhi.n	8004dd4 <UART_SetConfig+0x2cc>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0x284>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004da5 	.word	0x08004da5
 8004d90:	08004dad 	.word	0x08004dad
 8004d94:	08004db5 	.word	0x08004db5
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	08004dc5 	.word	0x08004dc5
 8004da0:	08004dcd 	.word	0x08004dcd
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004daa:	e180      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004dac:	2304      	movs	r3, #4
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db2:	e17c      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004db4:	2308      	movs	r3, #8
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dba:	e178      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc2:	e174      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dca:	e170      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004dcc:	2340      	movs	r3, #64	; 0x40
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd2:	e16c      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dda:	e168      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1b      	ldr	r2, [pc, #108]	; (8004e50 <UART_SetConfig+0x348>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d142      	bne.n	8004e6c <UART_SetConfig+0x364>
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <UART_SetConfig+0x338>)
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d838      	bhi.n	8004e64 <UART_SetConfig+0x35c>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <UART_SetConfig+0x2f0>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e11 	.word	0x08004e11
 8004dfc:	08004e19 	.word	0x08004e19
 8004e00:	08004e21 	.word	0x08004e21
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e55 	.word	0x08004e55
 8004e0c:	08004e5d 	.word	0x08004e5d
 8004e10:	2300      	movs	r3, #0
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e16:	e14a      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1e:	e146      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e26:	e142      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2e:	e13e      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004e30:	cfff69f3 	.word	0xcfff69f3
 8004e34:	58000c00 	.word	0x58000c00
 8004e38:	11fff4ff 	.word	0x11fff4ff
 8004e3c:	40011000 	.word	0x40011000
 8004e40:	58024400 	.word	0x58024400
 8004e44:	40004400 	.word	0x40004400
 8004e48:	40004800 	.word	0x40004800
 8004e4c:	40004c00 	.word	0x40004c00
 8004e50:	40005000 	.word	0x40005000
 8004e54:	2320      	movs	r3, #32
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5a:	e128      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004e5c:	2340      	movs	r3, #64	; 0x40
 8004e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e62:	e124      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e6a:	e120      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4acb      	ldr	r2, [pc, #812]	; (80051a0 <UART_SetConfig+0x698>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d176      	bne.n	8004f64 <UART_SetConfig+0x45c>
 8004e76:	4bcb      	ldr	r3, [pc, #812]	; (80051a4 <UART_SetConfig+0x69c>)
 8004e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7e:	2b28      	cmp	r3, #40	; 0x28
 8004e80:	d86c      	bhi.n	8004f5c <UART_SetConfig+0x454>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <UART_SetConfig+0x380>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004f2d 	.word	0x08004f2d
 8004e8c:	08004f5d 	.word	0x08004f5d
 8004e90:	08004f5d 	.word	0x08004f5d
 8004e94:	08004f5d 	.word	0x08004f5d
 8004e98:	08004f5d 	.word	0x08004f5d
 8004e9c:	08004f5d 	.word	0x08004f5d
 8004ea0:	08004f5d 	.word	0x08004f5d
 8004ea4:	08004f5d 	.word	0x08004f5d
 8004ea8:	08004f35 	.word	0x08004f35
 8004eac:	08004f5d 	.word	0x08004f5d
 8004eb0:	08004f5d 	.word	0x08004f5d
 8004eb4:	08004f5d 	.word	0x08004f5d
 8004eb8:	08004f5d 	.word	0x08004f5d
 8004ebc:	08004f5d 	.word	0x08004f5d
 8004ec0:	08004f5d 	.word	0x08004f5d
 8004ec4:	08004f5d 	.word	0x08004f5d
 8004ec8:	08004f3d 	.word	0x08004f3d
 8004ecc:	08004f5d 	.word	0x08004f5d
 8004ed0:	08004f5d 	.word	0x08004f5d
 8004ed4:	08004f5d 	.word	0x08004f5d
 8004ed8:	08004f5d 	.word	0x08004f5d
 8004edc:	08004f5d 	.word	0x08004f5d
 8004ee0:	08004f5d 	.word	0x08004f5d
 8004ee4:	08004f5d 	.word	0x08004f5d
 8004ee8:	08004f45 	.word	0x08004f45
 8004eec:	08004f5d 	.word	0x08004f5d
 8004ef0:	08004f5d 	.word	0x08004f5d
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	08004f5d 	.word	0x08004f5d
 8004f00:	08004f5d 	.word	0x08004f5d
 8004f04:	08004f5d 	.word	0x08004f5d
 8004f08:	08004f4d 	.word	0x08004f4d
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f5d 	.word	0x08004f5d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f55 	.word	0x08004f55
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f32:	e0bc      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004f34:	2304      	movs	r3, #4
 8004f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3a:	e0b8      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f42:	e0b4      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004f44:	2310      	movs	r3, #16
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4a:	e0b0      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e0ac      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e0a8      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e0a4      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a8f      	ldr	r2, [pc, #572]	; (80051a8 <UART_SetConfig+0x6a0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d130      	bne.n	8004fd0 <UART_SetConfig+0x4c8>
 8004f6e:	4b8d      	ldr	r3, [pc, #564]	; (80051a4 <UART_SetConfig+0x69c>)
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d826      	bhi.n	8004fc8 <UART_SetConfig+0x4c0>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x478>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004f99 	.word	0x08004f99
 8004f84:	08004fa1 	.word	0x08004fa1
 8004f88:	08004fa9 	.word	0x08004fa9
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9e:	e086      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa6:	e082      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e07e      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e07a      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004fb8:	2320      	movs	r3, #32
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e076      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e072      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e06e      	b.n	80050ae <UART_SetConfig+0x5a6>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a75      	ldr	r2, [pc, #468]	; (80051ac <UART_SetConfig+0x6a4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d130      	bne.n	800503c <UART_SetConfig+0x534>
 8004fda:	4b72      	ldr	r3, [pc, #456]	; (80051a4 <UART_SetConfig+0x69c>)
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d826      	bhi.n	8005034 <UART_SetConfig+0x52c>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <UART_SetConfig+0x4e4>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08005005 	.word	0x08005005
 8004ff0:	0800500d 	.word	0x0800500d
 8004ff4:	08005015 	.word	0x08005015
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	2300      	movs	r3, #0
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500a:	e050      	b.n	80050ae <UART_SetConfig+0x5a6>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005012:	e04c      	b.n	80050ae <UART_SetConfig+0x5a6>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e048      	b.n	80050ae <UART_SetConfig+0x5a6>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e044      	b.n	80050ae <UART_SetConfig+0x5a6>
 8005024:	2320      	movs	r3, #32
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e040      	b.n	80050ae <UART_SetConfig+0x5a6>
 800502c:	2340      	movs	r3, #64	; 0x40
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e03c      	b.n	80050ae <UART_SetConfig+0x5a6>
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e038      	b.n	80050ae <UART_SetConfig+0x5a6>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a5b      	ldr	r2, [pc, #364]	; (80051b0 <UART_SetConfig+0x6a8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d130      	bne.n	80050a8 <UART_SetConfig+0x5a0>
 8005046:	4b57      	ldr	r3, [pc, #348]	; (80051a4 <UART_SetConfig+0x69c>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b05      	cmp	r3, #5
 8005050:	d826      	bhi.n	80050a0 <UART_SetConfig+0x598>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x550>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	08005071 	.word	0x08005071
 800505c:	08005079 	.word	0x08005079
 8005060:	08005081 	.word	0x08005081
 8005064:	08005089 	.word	0x08005089
 8005068:	08005091 	.word	0x08005091
 800506c:	08005099 	.word	0x08005099
 8005070:	2302      	movs	r3, #2
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005076:	e01a      	b.n	80050ae <UART_SetConfig+0x5a6>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507e:	e016      	b.n	80050ae <UART_SetConfig+0x5a6>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e012      	b.n	80050ae <UART_SetConfig+0x5a6>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e00e      	b.n	80050ae <UART_SetConfig+0x5a6>
 8005090:	2320      	movs	r3, #32
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e00a      	b.n	80050ae <UART_SetConfig+0x5a6>
 8005098:	2340      	movs	r3, #64	; 0x40
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e006      	b.n	80050ae <UART_SetConfig+0x5a6>
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e002      	b.n	80050ae <UART_SetConfig+0x5a6>
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3f      	ldr	r2, [pc, #252]	; (80051b0 <UART_SetConfig+0x6a8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	f040 80f8 	bne.w	80052aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050be:	2b20      	cmp	r3, #32
 80050c0:	dc46      	bgt.n	8005150 <UART_SetConfig+0x648>
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	f2c0 8082 	blt.w	80051cc <UART_SetConfig+0x6c4>
 80050c8:	3b02      	subs	r3, #2
 80050ca:	2b1e      	cmp	r3, #30
 80050cc:	d87e      	bhi.n	80051cc <UART_SetConfig+0x6c4>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <UART_SetConfig+0x5cc>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	08005157 	.word	0x08005157
 80050d8:	080051cd 	.word	0x080051cd
 80050dc:	0800515f 	.word	0x0800515f
 80050e0:	080051cd 	.word	0x080051cd
 80050e4:	080051cd 	.word	0x080051cd
 80050e8:	080051cd 	.word	0x080051cd
 80050ec:	0800516f 	.word	0x0800516f
 80050f0:	080051cd 	.word	0x080051cd
 80050f4:	080051cd 	.word	0x080051cd
 80050f8:	080051cd 	.word	0x080051cd
 80050fc:	080051cd 	.word	0x080051cd
 8005100:	080051cd 	.word	0x080051cd
 8005104:	080051cd 	.word	0x080051cd
 8005108:	080051cd 	.word	0x080051cd
 800510c:	0800517f 	.word	0x0800517f
 8005110:	080051cd 	.word	0x080051cd
 8005114:	080051cd 	.word	0x080051cd
 8005118:	080051cd 	.word	0x080051cd
 800511c:	080051cd 	.word	0x080051cd
 8005120:	080051cd 	.word	0x080051cd
 8005124:	080051cd 	.word	0x080051cd
 8005128:	080051cd 	.word	0x080051cd
 800512c:	080051cd 	.word	0x080051cd
 8005130:	080051cd 	.word	0x080051cd
 8005134:	080051cd 	.word	0x080051cd
 8005138:	080051cd 	.word	0x080051cd
 800513c:	080051cd 	.word	0x080051cd
 8005140:	080051cd 	.word	0x080051cd
 8005144:	080051cd 	.word	0x080051cd
 8005148:	080051cd 	.word	0x080051cd
 800514c:	080051bf 	.word	0x080051bf
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d037      	beq.n	80051c4 <UART_SetConfig+0x6bc>
 8005154:	e03a      	b.n	80051cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005156:	f7fe fd4f 	bl	8003bf8 <HAL_RCCEx_GetD3PCLK1Freq>
 800515a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800515c:	e03c      	b.n	80051d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800515e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe fd5e 	bl	8003c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800516c:	e034      	b.n	80051d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800516e:	f107 0318 	add.w	r3, r7, #24
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe feaa 	bl	8003ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800517c:	e02c      	b.n	80051d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <UART_SetConfig+0x69c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <UART_SetConfig+0x69c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	08db      	lsrs	r3, r3, #3
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <UART_SetConfig+0x6ac>)
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800519c:	e01c      	b.n	80051d8 <UART_SetConfig+0x6d0>
 800519e:	bf00      	nop
 80051a0:	40011400 	.word	0x40011400
 80051a4:	58024400 	.word	0x58024400
 80051a8:	40007800 	.word	0x40007800
 80051ac:	40007c00 	.word	0x40007c00
 80051b0:	58000c00 	.word	0x58000c00
 80051b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b9d      	ldr	r3, [pc, #628]	; (8005430 <UART_SetConfig+0x928>)
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051bc:	e00c      	b.n	80051d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051be:	4b9d      	ldr	r3, [pc, #628]	; (8005434 <UART_SetConfig+0x92c>)
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051c2:	e009      	b.n	80051d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ca:	e005      	b.n	80051d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80051d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 81de 	beq.w	800559c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	4a94      	ldr	r2, [pc, #592]	; (8005438 <UART_SetConfig+0x930>)
 80051e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ea:	461a      	mov	r2, r3
 80051ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005200:	429a      	cmp	r2, r3
 8005202:	d305      	bcc.n	8005210 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800520a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520c:	429a      	cmp	r2, r3
 800520e:	d903      	bls.n	8005218 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005216:	e1c1      	b.n	800559c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521a:	2200      	movs	r2, #0
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	60fa      	str	r2, [r7, #12]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	4a84      	ldr	r2, [pc, #528]	; (8005438 <UART_SetConfig+0x930>)
 8005226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800522a:	b29b      	uxth	r3, r3
 800522c:	2200      	movs	r2, #0
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800523a:	f7fb f84d 	bl	80002d8 <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	020b      	lsls	r3, r1, #8
 8005250:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005254:	0202      	lsls	r2, r0, #8
 8005256:	6979      	ldr	r1, [r7, #20]
 8005258:	6849      	ldr	r1, [r1, #4]
 800525a:	0849      	lsrs	r1, r1, #1
 800525c:	2000      	movs	r0, #0
 800525e:	460c      	mov	r4, r1
 8005260:	4605      	mov	r5, r0
 8005262:	eb12 0804 	adds.w	r8, r2, r4
 8005266:	eb43 0905 	adc.w	r9, r3, r5
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	469a      	mov	sl, r3
 8005272:	4693      	mov	fp, r2
 8005274:	4652      	mov	r2, sl
 8005276:	465b      	mov	r3, fp
 8005278:	4640      	mov	r0, r8
 800527a:	4649      	mov	r1, r9
 800527c:	f7fb f82c 	bl	80002d8 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4613      	mov	r3, r2
 8005286:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800528e:	d308      	bcc.n	80052a2 <UART_SetConfig+0x79a>
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005296:	d204      	bcs.n	80052a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800529e:	60da      	str	r2, [r3, #12]
 80052a0:	e17c      	b.n	800559c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80052a8:	e178      	b.n	800559c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b2:	f040 80c5 	bne.w	8005440 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80052b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	dc48      	bgt.n	8005350 <UART_SetConfig+0x848>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	db7b      	blt.n	80053ba <UART_SetConfig+0x8b2>
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d879      	bhi.n	80053ba <UART_SetConfig+0x8b2>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0x7c4>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	08005357 	.word	0x08005357
 80052d0:	0800535f 	.word	0x0800535f
 80052d4:	080053bb 	.word	0x080053bb
 80052d8:	080053bb 	.word	0x080053bb
 80052dc:	08005367 	.word	0x08005367
 80052e0:	080053bb 	.word	0x080053bb
 80052e4:	080053bb 	.word	0x080053bb
 80052e8:	080053bb 	.word	0x080053bb
 80052ec:	08005377 	.word	0x08005377
 80052f0:	080053bb 	.word	0x080053bb
 80052f4:	080053bb 	.word	0x080053bb
 80052f8:	080053bb 	.word	0x080053bb
 80052fc:	080053bb 	.word	0x080053bb
 8005300:	080053bb 	.word	0x080053bb
 8005304:	080053bb 	.word	0x080053bb
 8005308:	080053bb 	.word	0x080053bb
 800530c:	08005387 	.word	0x08005387
 8005310:	080053bb 	.word	0x080053bb
 8005314:	080053bb 	.word	0x080053bb
 8005318:	080053bb 	.word	0x080053bb
 800531c:	080053bb 	.word	0x080053bb
 8005320:	080053bb 	.word	0x080053bb
 8005324:	080053bb 	.word	0x080053bb
 8005328:	080053bb 	.word	0x080053bb
 800532c:	080053bb 	.word	0x080053bb
 8005330:	080053bb 	.word	0x080053bb
 8005334:	080053bb 	.word	0x080053bb
 8005338:	080053bb 	.word	0x080053bb
 800533c:	080053bb 	.word	0x080053bb
 8005340:	080053bb 	.word	0x080053bb
 8005344:	080053bb 	.word	0x080053bb
 8005348:	080053bb 	.word	0x080053bb
 800534c:	080053ad 	.word	0x080053ad
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d02e      	beq.n	80053b2 <UART_SetConfig+0x8aa>
 8005354:	e031      	b.n	80053ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005356:	f7fd fa19 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 800535a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800535c:	e033      	b.n	80053c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800535e:	f7fd fa2b 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 8005362:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005364:	e02f      	b.n	80053c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fc5a 	bl	8003c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005374:	e027      	b.n	80053c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005376:	f107 0318 	add.w	r3, r7, #24
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fda6 	bl	8003ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005384:	e01f      	b.n	80053c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005386:	4b2d      	ldr	r3, [pc, #180]	; (800543c <UART_SetConfig+0x934>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <UART_SetConfig+0x934>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	08db      	lsrs	r3, r3, #3
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	4a24      	ldr	r2, [pc, #144]	; (8005430 <UART_SetConfig+0x928>)
 800539e:	fa22 f303 	lsr.w	r3, r2, r3
 80053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053a4:	e00f      	b.n	80053c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80053a6:	4b22      	ldr	r3, [pc, #136]	; (8005430 <UART_SetConfig+0x928>)
 80053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053aa:	e00c      	b.n	80053c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053ac:	4b21      	ldr	r3, [pc, #132]	; (8005434 <UART_SetConfig+0x92c>)
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053b0:	e009      	b.n	80053c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053b8:	e005      	b.n	80053c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80053c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80e7 	beq.w	800559c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	4a19      	ldr	r2, [pc, #100]	; (8005438 <UART_SetConfig+0x930>)
 80053d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d8:	461a      	mov	r2, r3
 80053da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e0:	005a      	lsls	r2, r3, #1
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	441a      	add	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d916      	bls.n	8005428 <UART_SetConfig+0x920>
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d212      	bcs.n	8005428 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	b29b      	uxth	r3, r3
 8005406:	f023 030f 	bic.w	r3, r3, #15
 800540a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	b29a      	uxth	r2, r3
 8005418:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800541a:	4313      	orrs	r3, r2
 800541c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	e0b9      	b.n	800559c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800542e:	e0b5      	b.n	800559c <UART_SetConfig+0xa94>
 8005430:	03d09000 	.word	0x03d09000
 8005434:	003d0900 	.word	0x003d0900
 8005438:	08005c94 	.word	0x08005c94
 800543c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005440:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005444:	2b20      	cmp	r3, #32
 8005446:	dc49      	bgt.n	80054dc <UART_SetConfig+0x9d4>
 8005448:	2b00      	cmp	r3, #0
 800544a:	db7c      	blt.n	8005546 <UART_SetConfig+0xa3e>
 800544c:	2b20      	cmp	r3, #32
 800544e:	d87a      	bhi.n	8005546 <UART_SetConfig+0xa3e>
 8005450:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <UART_SetConfig+0x950>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	080054e3 	.word	0x080054e3
 800545c:	080054eb 	.word	0x080054eb
 8005460:	08005547 	.word	0x08005547
 8005464:	08005547 	.word	0x08005547
 8005468:	080054f3 	.word	0x080054f3
 800546c:	08005547 	.word	0x08005547
 8005470:	08005547 	.word	0x08005547
 8005474:	08005547 	.word	0x08005547
 8005478:	08005503 	.word	0x08005503
 800547c:	08005547 	.word	0x08005547
 8005480:	08005547 	.word	0x08005547
 8005484:	08005547 	.word	0x08005547
 8005488:	08005547 	.word	0x08005547
 800548c:	08005547 	.word	0x08005547
 8005490:	08005547 	.word	0x08005547
 8005494:	08005547 	.word	0x08005547
 8005498:	08005513 	.word	0x08005513
 800549c:	08005547 	.word	0x08005547
 80054a0:	08005547 	.word	0x08005547
 80054a4:	08005547 	.word	0x08005547
 80054a8:	08005547 	.word	0x08005547
 80054ac:	08005547 	.word	0x08005547
 80054b0:	08005547 	.word	0x08005547
 80054b4:	08005547 	.word	0x08005547
 80054b8:	08005547 	.word	0x08005547
 80054bc:	08005547 	.word	0x08005547
 80054c0:	08005547 	.word	0x08005547
 80054c4:	08005547 	.word	0x08005547
 80054c8:	08005547 	.word	0x08005547
 80054cc:	08005547 	.word	0x08005547
 80054d0:	08005547 	.word	0x08005547
 80054d4:	08005547 	.word	0x08005547
 80054d8:	08005539 	.word	0x08005539
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d02e      	beq.n	800553e <UART_SetConfig+0xa36>
 80054e0:	e031      	b.n	8005546 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e2:	f7fd f953 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 80054e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054e8:	e033      	b.n	8005552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ea:	f7fd f965 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 80054ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054f0:	e02f      	b.n	8005552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe fb94 	bl	8003c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005500:	e027      	b.n	8005552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005502:	f107 0318 	add.w	r3, r7, #24
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe fce0 	bl	8003ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005510:	e01f      	b.n	8005552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005512:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <UART_SetConfig+0xac0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800551e:	4b2a      	ldr	r3, [pc, #168]	; (80055c8 <UART_SetConfig+0xac0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	08db      	lsrs	r3, r3, #3
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	4a28      	ldr	r2, [pc, #160]	; (80055cc <UART_SetConfig+0xac4>)
 800552a:	fa22 f303 	lsr.w	r3, r2, r3
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005530:	e00f      	b.n	8005552 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <UART_SetConfig+0xac4>)
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005536:	e00c      	b.n	8005552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <UART_SetConfig+0xac8>)
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800553c:	e009      	b.n	8005552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005544:	e005      	b.n	8005552 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005550:	bf00      	nop
    }

    if (pclk != 0U)
 8005552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d021      	beq.n	800559c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <UART_SetConfig+0xacc>)
 800555e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005562:	461a      	mov	r2, r3
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005566:	fbb3 f2f2 	udiv	r2, r3, r2
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	441a      	add	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	fbb2 f3f3 	udiv	r3, r2, r3
 800557a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d909      	bls.n	8005596 <UART_SetConfig+0xa8e>
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d205      	bcs.n	8005596 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	b29a      	uxth	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	e002      	b.n	800559c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2201      	movs	r2, #1
 80055a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2200      	movs	r2, #0
 80055b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80055b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3748      	adds	r7, #72	; 0x48
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
 80055cc:	03d09000 	.word	0x03d09000
 80055d0:	003d0900 	.word	0x003d0900
 80055d4:	08005c94 	.word	0x08005c94

080055d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01a      	beq.n	80056ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d6:	d10a      	bne.n	80056ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	605a      	str	r2, [r3, #4]
  }
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b098      	sub	sp, #96	; 0x60
 8005720:	af02      	add	r7, sp, #8
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800572c:	f7fb fce8 	bl	8001100 <HAL_GetTick>
 8005730:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b08      	cmp	r3, #8
 800573e:	d12f      	bne.n	80057a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005748:	2200      	movs	r2, #0
 800574a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f88e 	bl	8005870 <UART_WaitOnFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d022      	beq.n	80057a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800576e:	653b      	str	r3, [r7, #80]	; 0x50
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005778:	647b      	str	r3, [r7, #68]	; 0x44
 800577a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800577e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e6      	bne.n	800575a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e063      	b.n	8005868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d149      	bne.n	8005842 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b6:	2200      	movs	r2, #0
 80057b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f857 	bl	8005870 <UART_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d03c      	beq.n	8005842 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	623b      	str	r3, [r7, #32]
   return(result);
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
 80057e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e6      	bne.n	80057c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3308      	adds	r3, #8
 8005800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	60fb      	str	r3, [r7, #12]
   return(result);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	64bb      	str	r3, [r7, #72]	; 0x48
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800581a:	61fa      	str	r2, [r7, #28]
 800581c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	69b9      	ldr	r1, [r7, #24]
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	617b      	str	r3, [r7, #20]
   return(result);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e5      	bne.n	80057fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e012      	b.n	8005868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3758      	adds	r7, #88	; 0x58
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005880:	e049      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d045      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588a:	f7fb fc39 	bl	8001100 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e048      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d031      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d110      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2208      	movs	r2, #8
 80058c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f839 	bl	8005940 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2208      	movs	r2, #8
 80058d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e029      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f0:	d111      	bne.n	8005916 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f81f 	bl	8005940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00f      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d0a6      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b095      	sub	sp, #84	; 0x54
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800595c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005966:	643b      	str	r3, [r7, #64]	; 0x40
 8005968:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800596c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e6      	bne.n	8005948 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	61fb      	str	r3, [r7, #28]
   return(result);
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <UART_EndRxTransfer+0xc8>)
 800598e:	4013      	ands	r3, r2
 8005990:	64bb      	str	r3, [r7, #72]	; 0x48
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3308      	adds	r3, #8
 8005998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800599a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e5      	bne.n	800597a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d118      	bne.n	80059e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f023 0310 	bic.w	r3, r3, #16
 80059ca:	647b      	str	r3, [r7, #68]	; 0x44
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6979      	ldr	r1, [r7, #20]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	613b      	str	r3, [r7, #16]
   return(result);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e6      	bne.n	80059b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059fc:	bf00      	nop
 80059fe:	3754      	adds	r7, #84	; 0x54
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	effffffe 	.word	0xeffffffe

08005a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e027      	b.n	8005a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2224      	movs	r2, #36	; 0x24
 8005a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0201 	bic.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e02d      	b.n	8005af2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2224      	movs	r2, #36	; 0x24
 8005aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f850 	bl	8005b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e02d      	b.n	8005b6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2224      	movs	r2, #36	; 0x24
 8005b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f812 	bl	8005b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d108      	bne.n	8005b9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b98:	e031      	b.n	8005bfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b9a:	2310      	movs	r3, #16
 8005b9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b9e:	2310      	movs	r3, #16
 8005ba0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	0e5b      	lsrs	r3, r3, #25
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	0f5b      	lsrs	r3, r3, #29
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bc2:	7bbb      	ldrb	r3, [r7, #14]
 8005bc4:	7b3a      	ldrb	r2, [r7, #12]
 8005bc6:	4911      	ldr	r1, [pc, #68]	; (8005c0c <UARTEx_SetNbDataToProcess+0x94>)
 8005bc8:	5c8a      	ldrb	r2, [r1, r2]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bce:	7b3a      	ldrb	r2, [r7, #12]
 8005bd0:	490f      	ldr	r1, [pc, #60]	; (8005c10 <UARTEx_SetNbDataToProcess+0x98>)
 8005bd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	7b7a      	ldrb	r2, [r7, #13]
 8005be4:	4909      	ldr	r1, [pc, #36]	; (8005c0c <UARTEx_SetNbDataToProcess+0x94>)
 8005be6:	5c8a      	ldrb	r2, [r1, r2]
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bec:	7b7a      	ldrb	r2, [r7, #13]
 8005bee:	4908      	ldr	r1, [pc, #32]	; (8005c10 <UARTEx_SetNbDataToProcess+0x98>)
 8005bf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	08005cac 	.word	0x08005cac
 8005c10:	08005cb4 	.word	0x08005cb4

08005c14 <memset>:
 8005c14:	4402      	add	r2, r0
 8005c16:	4603      	mov	r3, r0
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d100      	bne.n	8005c1e <memset+0xa>
 8005c1c:	4770      	bx	lr
 8005c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c22:	e7f9      	b.n	8005c18 <memset+0x4>

08005c24 <__libc_init_array>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	4d0d      	ldr	r5, [pc, #52]	; (8005c5c <__libc_init_array+0x38>)
 8005c28:	4c0d      	ldr	r4, [pc, #52]	; (8005c60 <__libc_init_array+0x3c>)
 8005c2a:	1b64      	subs	r4, r4, r5
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	2600      	movs	r6, #0
 8005c30:	42a6      	cmp	r6, r4
 8005c32:	d109      	bne.n	8005c48 <__libc_init_array+0x24>
 8005c34:	4d0b      	ldr	r5, [pc, #44]	; (8005c64 <__libc_init_array+0x40>)
 8005c36:	4c0c      	ldr	r4, [pc, #48]	; (8005c68 <__libc_init_array+0x44>)
 8005c38:	f000 f818 	bl	8005c6c <_init>
 8005c3c:	1b64      	subs	r4, r4, r5
 8005c3e:	10a4      	asrs	r4, r4, #2
 8005c40:	2600      	movs	r6, #0
 8005c42:	42a6      	cmp	r6, r4
 8005c44:	d105      	bne.n	8005c52 <__libc_init_array+0x2e>
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4c:	4798      	blx	r3
 8005c4e:	3601      	adds	r6, #1
 8005c50:	e7ee      	b.n	8005c30 <__libc_init_array+0xc>
 8005c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c56:	4798      	blx	r3
 8005c58:	3601      	adds	r6, #1
 8005c5a:	e7f2      	b.n	8005c42 <__libc_init_array+0x1e>
 8005c5c:	08005cc4 	.word	0x08005cc4
 8005c60:	08005cc4 	.word	0x08005cc4
 8005c64:	08005cc4 	.word	0x08005cc4
 8005c68:	08005cc8 	.word	0x08005cc8

08005c6c <_init>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr

08005c78 <_fini>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr
